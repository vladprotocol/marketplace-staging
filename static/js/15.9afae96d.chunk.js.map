{"version":3,"sources":["views/VLADCollection/utils/contracts.ts","utils/erc20.ts","utils/formatBalance.ts","hooks/useTokenBalance.ts","views/VLADCollectionDetail/components/BuyNftModal.tsx","views/VLADCollectionDetail/components/SellNftModal.tsx","views/VLADCollectionDetail/index.tsx","hooks/useAllowance.ts","hooks/useApprove.ts"],"names":["getNftContract","contractOptions","nftAbi","nft","getContract","NFT","getNewNftContract","nftFarm","NftFarm","getFromWei","v","parseFloat","fromWei","toString","getFromWayArray","array","t","length","i","push","getToFloat","parseInt","getToInt","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","getBalanceNumber","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","useTokenBalance","useState","setBalance","useWallet","account","ethereum","fastRefresh","useRefresh","useEffect","res","fetchBalance","Actions","styled","Text","div","BuyNftModal","label","theme","colors","text","tradeId","sellPrice","onDismiss","onSuccess","setIsLoading","error","setError","TranslateString","useI18n","vladBalance","getLifeAddress","vladInWallet","values","isBuyDisabled","NFTFarmV2Contract","useNFTFarmV2Contract","handleConfirm","utils","isAddress","buy","send","from","on","console","log","window","location","reload","className","type","onClick","color","mb","src","alt","_","round","fullWidth","disabled","SellNftModal","sellMinPrice","nftSecondaryMarket","isLoading","totalArtistFee","totalDevFee","totalGovernanceFee","setValues","totalFee","sum","isValidAddress","sellPriceValue","sellMinPriceValue","sell","id","name","placeholder","value","onChange","evt","target","inputValue","isWarning","VLADCollectionDetail","nftDetail","previewImage","description","rarity","setNFT","setSellPrice","creator","setCreator","authorTwitter","setAuthorTwitter","setSellMinPrice","mySoldNFT","setMySoldNFT","nftSecondaryMarketData","setNftSecondaryMarketData","nftId","setNftId","isListed","setIsListed","pendingTx","setPendingTx","useParams","contraToken","useERC20","allowance","tokenContract","spenderAddress","dependency","setAllowance","fetch","useNftAllowance","onApprove","useCallback","approve","ethers","constants","MaxUint256","tx","useNftApprove","newNftContract","getTradeByTradeId","tradeByTradeId","nftSecondaryTradeInfo","getTradesByNftIdAndUser","Number","tradesByNftIdAndUser","nftInfo","authorName","authorTwitterValue","startCase","toLower","getListOpenTradesByNftId","listOpenTradeIds","includes","getNftInfoState","nfts","filter","data","handleSuccess","useModal","onPresentBuyModal","onPresentSellModal","to","variant","mt","tabIndex","pathname","role","toFixed"],"mappings":"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","file":"static/js/15.9afae96d.chunk.js","sourcesContent":["import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/newnfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract(erc20 as unknown as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\n\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\r\n  return displayBalance.toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\r\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport _ from 'lodash';\r\nimport BigNumber from 'bignumber.js'\r\nimport { Link } from 'react-router-dom';\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { NFT, NftFarm } from 'config/constants/newnfts'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getLifeAddress } from 'utils/addressHelpers'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useNFTFarmV2Contract } from 'hooks/useContract'\r\n\r\ninterface BuyNftModalProps {\r\n  nft: Nft\r\n  tradeId: number\r\n  sellPrice: number\r\n  onSuccess: () => any\r\n  onDismiss: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst BuyNftModal: React.FC<BuyNftModalProps> = ({ nft, tradeId, sellPrice, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  \r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet();\r\n  \r\n  const vladBalance = useTokenBalance(getLifeAddress());\r\n  const vladInWallet = getBalanceNumber(vladBalance);\r\n\r\n  const [values, setValues] = useState({\r\n    address: account,\r\n    tradeId\r\n  })\r\n\r\n  const isBuyDisabled =  new BigNumber(sellPrice) > new BigNumber(vladInWallet * (10**18));\r\n\r\n  const NFTFarmV2Contract = useNFTFarmV2Contract(NftFarm)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(values.address)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        await NFTFarmV2Contract.methods\r\n          .buy(values.tradeId)\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            console.log('receipt')\r\n          })\r\n          .on('error', () => {\r\n            setError('Unable to buy NFT')\r\n            setIsLoading(false)\r\n          })\r\n          window.location.reload();\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to buy NFT:', err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"ctm-modal modal fade show d-block\">\r\n      <div className=\"modal-dialog modal-dialog-centered \">\r\n          <div className=\"modal-content\">\r\n\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title text-color-white\">Buy Now</h5>\r\n              <button type=\"button\" className=\"btn-close ctm-btnclose\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={onDismiss}>CANCEL</button>\r\n            </div>\r\n            {error && (\r\n              <Text color=\"failure\" mb=\"8px\">\r\n                {error}\r\n              </Text>\r\n            )}\r\n            <div className=\"modal-body\">\r\n              <p>Your are buying <span>ALIFE Token</span></p>\r\n              <div className=\"bidbox\">\r\n                <ul>\r\n                  <li>\r\n                    <div className=\"bidcontent\">\r\n                      <div className=\"vbid-details\">\r\n                        <h6 className=\"text-color-white\">\r\n                          <span className=\"ctmtooltip\">\r\n                            {/* <Link to=\"/\" className=\"ctmtooltip\"> */}\r\n                            <img src=\"/assets/images/upgraph.svg\" alt=\"\" />BONDING CURVE\r\n                            <div className=\"ctmtooltiptext\">\r\n                              <h6 className=\"title\"><img src=\"/assets/images/upgraph.svg\" alt=\"\" />BONDING CURVE</h6>\r\n                              <hr />\r\n                              <p>A bonding curve is a mathematical curve that defines the relationship between the price and the supply of a given asset.</p>\r\n                              <p className=\"text-deem\">After the sale of each NFT, the price of the next piece will automatically increase by a percentage calculated by the bonding curve.</p>\r\n                            </div>\r\n                            {/* </Link> */}\r\n                          </span>\r\n                        </h6>\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <hr />\r\n              <div className=\"amt-wrap\">\r\n                <div className=\"amt-title\">\r\n                  <span>Your ALIFE balance</span>\r\n                  <span>Service fee (5%)</span>\r\n                  <span>You will pay</span>\r\n                </div>\r\n                <div className=\"amt-bal\">\r\n                  <span>{_.round(vladInWallet)} ALIFE</span>\r\n                  <span>{(sellPrice / (10**18)) * 0.05} ALIFE</span>\r\n                  <span>{(sellPrice / (10**18)) + (sellPrice / (10**18)) * 0.05} ALIFE</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"btn-bidwrap\">\r\n                <Actions>\r\n                    <Button fullWidth onClick={onDismiss} >\r\n                      {TranslateString(462, 'Cancel')}\r\n                    </Button>\r\n                    <Button fullWidth onClick={handleConfirm} disabled={ isBuyDisabled} >\r\n                      Buy now\r\n                    </Button>\r\n                </Actions>\r\n              </div>\r\n              {new BigNumber(sellPrice) > new BigNumber(vladInWallet * (10**18)) && <div className=\"alertnote\">\r\n                <p><img src=\"/assets/images/alert-triangle.svg\" alt=\"alert icon\" />Not enough funds</p>\r\n              </div>  }\r\n              \r\n            </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BuyNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport _ from 'lodash';\r\nimport BigNumber from 'bignumber.js'\r\nimport { Link } from 'react-router-dom';\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getLifeAddress } from 'utils/addressHelpers'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { NFT, NftFarm } from 'config/constants/newnfts'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useNFTFarmV2Contract } from 'hooks/useContract'\r\n\r\ninterface SellNftModalProps {\r\n  nft: Nft\r\n  tradeId: number\r\n  sellMinPrice: number\r\n  nftSecondaryMarket: any\r\n  onSuccess: () => any\r\n  onDismiss: () => void\r\n}\r\n\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst SellNftModal: React.FC<SellNftModalProps> = ({ nft, tradeId, sellMinPrice, nftSecondaryMarket, onSuccess, onDismiss }) => {\r\n\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const { account } = useWallet()\r\n\r\n  \r\n  const vladBalance = useTokenBalance(getLifeAddress());\r\n  const vladInWallet = getBalanceNumber(vladBalance)\r\n\r\n  const { totalArtistFee, totalDevFee, totalGovernanceFee } = nftSecondaryMarket;\r\n\r\n\r\n  const [values, setValues] = useState({\r\n    address: account,\r\n    tradeId,\r\n    sellPrice: 0\r\n  })\r\n\r\n  \r\n  const totalFee = +(_.sum([parseInt(totalDevFee, 10), parseInt(totalArtistFee, 10), parseInt(totalGovernanceFee, 10), values.sellPrice]));\r\n\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n\r\n  const NFTFarmV2Contract = useNFTFarmV2Contract(NftFarm)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(values.address)\r\n\r\n      const sellPriceValue = ((values.sellPrice * (10 ** 18)));\r\n      const sellMinPriceValue = ((sellMinPrice));\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else if(sellPriceValue < sellMinPriceValue) {\r\n        setError(TranslateString(999, 'Please enter sell price greater than min sell price'))\r\n      } else {\r\n        await NFTFarmV2Contract.methods\r\n          .sell(values.tradeId, new BigNumber(values.sellPrice * (10 ** 18)))\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to sell NFT')\r\n            setIsLoading(false)\r\n          })\r\n          window.location.reload();\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to sell NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue, name } = evt.target\r\n    setValues({ ...values, [name]: inputValue })\r\n  }\r\n\r\n  return (\r\n    <div className=\"ctm-modal modal fade show d-block\">\r\n      <div className=\"modal-dialog modal-dialog-centered \">\r\n          <div className=\"modal-content\">\r\n\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title text-color-white\">Sell Now</h5>\r\n              <button type=\"button\" className=\"btn-close ctm-btnclose\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={onDismiss}>CANCEL</button>\r\n            </div>\r\n            {error && (\r\n              <Text color=\"failure\" mb=\"8px\">\r\n                {error}\r\n              </Text>\r\n            )}\r\n            <div className=\"modal-body\">\r\n              <p>Your are selling <span>ALIFE Token</span></p>\r\n              <div className=\"bidbox\">\r\n                <ul>\r\n                  <li>\r\n                    <div className=\"bidcontent\">\r\n                      <div className=\"vbid-details\">\r\n                      <h6><span className=\"vladinput\">\r\n                          <Input\r\n                            className=\"form-control\"\r\n                            id=\"sellPrice\"\r\n                            name=\"sellPrice\"\r\n                            type=\"number\"\r\n                            placeholder={TranslateString(999, 'Enter selling price')}\r\n                            value={values.sellPrice}\r\n                            onChange={handleChange}\r\n                            isWarning={error}\r\n                            disabled={isLoading}\r\n                          />\r\n                        </span>\r\n                        </h6>\r\n                        <h6 className=\"text-color-white\">\r\n                          <span className=\"ctmtooltip\">\r\n                            {/* <Link to=\"/\" className=\"ctmtooltip\"> */}\r\n                            <img src=\"/assets/images/upgraph.svg\" alt=\"\" />BONDING CURVE\r\n                            <div className=\"ctmtooltiptext\">\r\n                              <h6 className=\"title\"><img src=\"/assets/images/upgraph.svg\" alt=\"\" />BONDING CURVE</h6>\r\n                              <hr />\r\n                              <p>A bonding curve is a mathematical curve that defines the relationship between the price and the supply of a given asset.</p>\r\n                              <p className=\"text-deem\">After the sale of each NFT, the price of the next piece will automatically increase by a percentage calculated by the bonding curve.</p>\r\n                            </div>\r\n                            {/* </Link> */}\r\n                          </span>\r\n                        </h6>\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <hr />\r\n              <div className=\"amt-wrap\">\r\n                <div className=\"amt-title\">\r\n                  <span>Your ALIFE balance</span>\r\n                  <span>Developer Fee</span>\r\n                  <span>Artsit Fee</span>\r\n                  <span>Governance Fee</span>\r\n                  <span>You will get</span>\r\n                </div>\r\n                <div className=\"amt-bal\">\r\n                  <span>{_.round(vladInWallet)} ALIFE</span>\r\n                  <span>{totalDevFee} ALIFE</span>\r\n                  <span>{totalArtistFee} ALIFE</span>\r\n                  <span>{totalGovernanceFee} ALIFE</span>\r\n                  <span>{totalFee} ALIFE</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"btn-bidwrap\">\r\n                <Actions>\r\n                    <Button fullWidth onClick={onDismiss} >\r\n                      {TranslateString(462, 'Cancel')}\r\n                    </Button>\r\n                    <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !values.address || !values.sellPrice} >\r\n                      Sell now\r\n                    </Button>\r\n                </Actions>\r\n              </div>\r\n            \r\n            </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  \r\n  )\r\n}\r\n\r\nexport default SellNftModal\r\n","import React, { useEffect, useState } from 'react'\r\nimport _ from 'lodash';\r\nimport { Link, useParams, useLocation } from 'react-router-dom';\r\nimport {\r\n    useModal,\r\n    Button\r\n} from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport nfts, { NftFarm } from 'config/constants/newnfts';\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { getLifeAddress } from 'utils/addressHelpers'\r\nimport { useNftAllowance } from '../../hooks/useAllowance'\r\nimport BuyNftModal from './components/BuyNftModal'\r\nimport SellNftModal from './components/SellNftModal'\r\nimport { getNewNftContract } from '../VLADCollection/utils/contracts'\r\nimport { useNftApprove } from '../../hooks/useApprove'\r\n\r\ninterface RouteParams {\r\n    id: string\r\n}\r\n\r\ninterface LocationParams {\r\n    creator?: string\r\n    authorTwitter?: string\r\n}\r\n\r\n\r\nconst VLADCollectionDetail = () => {\r\n\r\n    const { account } = useWallet()\r\n    const [NFT, setNFT] = useState(0)\r\n    const [sellPriceValue, setSellPrice] = useState(0)\r\n    const [creator, setCreator] = useState('')\r\n    const [authorTwitter, setAuthorTwitter] = useState('')\r\n    const [sellMinPriceValue, setSellMinPrice] = useState(0)\r\n    const [mySoldNFT, setMySoldNFT] = useState(false)\r\n    const [nftSecondaryMarketData, setNftSecondaryMarketData] = useState({})\r\n    const [nftId, setNftId] = useState(0);\r\n    const [isListed, setIsListed] = useState(false)\r\n    const [pendingTx, setPendingTx] = useState(false)\r\n\r\n    const params = useParams<RouteParams>();\r\n\r\n    const { id } = params;\r\n\r\n    \r\n    const contraToken = useERC20(getLifeAddress())\r\n    const allowance = useNftAllowance(contraToken, NftFarm, pendingTx)\r\n    \r\n    const onApprove = useNftApprove(contraToken, NftFarm)\r\n\r\n    useEffect(() => {\r\n        const getNftInfoState = async () => {\r\n            const newNftContract = getNewNftContract()\r\n            const tradeByTradeId = await newNftContract.methods.getTradeByTradeId(id).call()\r\n            const nftSecondaryTradeInfo = await newNftContract.methods.nftSecondaryTradeInfo(id).call()\r\n\r\n            if (account) {\r\n                const tradesByNftIdAndUser = await newNftContract.methods.getTradesByNftIdAndUser(account, Number(tradeByTradeId[0])).call()\r\n                setNftId(Number(tradeByTradeId[0]));\r\n                // Min sell price\r\n                const nftSecondaryMarket = await newNftContract.methods.nftSecondaryMarket(Number(tradeByTradeId[0])).call()\r\n                setNftSecondaryMarketData(nftSecondaryMarket);\r\n                const { sellMinPrice } = nftSecondaryMarket;\r\n                setSellMinPrice(sellMinPrice);\r\n\r\n                // Info\r\n                const nftInfo = await newNftContract.methods.nftInfo(Number(tradeByTradeId[0])).call();\r\n                const { authorName, authorTwitter: authorTwitterValue } = nftInfo;\r\n                setCreator(_.startCase(_.toLower(authorName)));\r\n                setAuthorTwitter(authorTwitterValue);\r\n\r\n                // Check if tradeId exists in listed.\r\n                const listOpenTradeIds = await newNftContract.methods.getListOpenTradesByNftId(Number(tradeByTradeId[0])).call();\r\n                setIsListed(listOpenTradeIds.includes(id));\r\n\r\n                const { sellPrice } = nftSecondaryTradeInfo;\r\n\r\n                setSellPrice(sellPrice)\r\n                setNFT(Number(tradeByTradeId[0]))\r\n                setMySoldNFT(tradesByNftIdAndUser.includes(id))\r\n            }\r\n        }\r\n        getNftInfoState()\r\n    }, [id, account])\r\n    \r\n    let nftDetail;\r\n    let previewImage;\r\n    let name;\r\n    let description;\r\n    let rarity;\r\n    if(nftId) {\r\n        const nftDetailArray = nfts.filter((data) => data.nftId === nftId);\r\n\r\n        nftDetail = nftDetailArray[0];\r\n        previewImage = nftDetail.previewImage;\r\n        name = nftDetail.name;\r\n        description = nftDetail.description;\r\n        rarity = nftDetail.rarity\r\n    }\r\n    \r\n\r\n    const handleSuccess = () => {\r\n        return true;\r\n    }\r\n\r\n    const [onPresentBuyModal] = useModal(\r\n        <BuyNftModal nft={nftDetail} tradeId={parseInt(id)} sellPrice={sellPriceValue} onSuccess={handleSuccess} onDismiss = {handleSuccess} />,\r\n    )\r\n\r\n    const [onPresentSellModal] = useModal(\r\n        <SellNftModal nft={nftDetail} tradeId={parseInt(id)} sellMinPrice={sellMinPriceValue} nftSecondaryMarket={nftSecondaryMarketData} onSuccess={handleSuccess} onDismiss = {handleSuccess}  />,\r\n    )\r\n\r\n    return (\r\n        <section className=\"vcollectionsec\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12 col-md-12 mb-5 vchead\">\r\n                        <Link to=\"/vlad-collection\" className=\"varrow-icon\"><img src=\"/assets/images/ArrowLeft.svg\" alt='' />Vlad Collection</Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12 col-md-6\">\r\n                        <div className=\"details-img\">\r\n                            <img src={`/images/nfts/${previewImage}`} alt=\"Vitruvian Androgyne\" className=\"img-fluid\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-sm-12 col-md-6\">\r\n                        <div className=\"details-block\">\r\n                            <div className=\"details-head\">\r\n                                <div>\r\n                                    <h6 className=\"inner-title\">{name}</h6>\r\n                                    {/* <p>Edition 2 of 6</p> */}\r\n                                </div>\r\n                                <ul>\r\n                                    <li><Link to=\"/\"><img src=\"/assets/images/staricon.svg\" alt=\"icon\" className=\"img-fluid\" /></Link></li>\r\n                                    <li><Link to=\"/\"><img src=\"/assets/images/share-icon.svg\" alt=\"icon\" className=\"img-fluid\" /></Link></li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=''>\r\n                                <p>“{description}”</p>\r\n                            </div>\r\n                            {/* <div className=\"bidbox\">\r\n                                <ul>\r\n                                    <li>\r\n                                        <div className=\"bidcontent\">\r\n                                            <div className=\"bid-left\">\r\n                                                <p>Highest bid by <Link to=\"/\">0x1b12n10...n128</Link></p>\r\n                                                <h6>100 VLAD <span>$56.49</span></h6>\r\n                                            </div>\r\n                                            <div className=\"bid-right\">\r\n                                                <p>Aution ends in</p>\r\n                                                <h6>24d  8h  14m  25s</h6>\r\n                                            </div>\r\n                                        </div>\r\n                                    </li>\r\n                                </ul>\r\n                            </div> */}\r\n\r\n                            {/* TODO:: Uncomment when data is available. */}\r\n                            {/* <p className=\"service-fee\">Service fee: <span>5%</span></p> */}\r\n\r\n                            {allowance > sellPriceValue &&  mySoldNFT === false ? <ul>\r\n                                {/* <li><Link to={`/vlad-detail/${id}`}  className=\"btn-link\" data-bs-toggle=\"modal\" data-bs-target=\"#buyvlad\" onClick={onPresentTransferModal}>Buy Now</Link></li> */}\r\n                                <li>\r\n                                    <Button className=\"btn-link\" fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentBuyModal}>\r\n                                        Buy Now\r\n                                    </Button>\r\n                                </li>\r\n                                {/* <li><Link to=\"/\" className=\"btn-link\" data-bs-toggle=\"modal\" data-bs-target=\"#placeabid\">PLACE A BID</Link></li> */}\r\n                            </ul>\r\n                            :\r\n                            mySoldNFT === true && isListed === false && \r\n                            <ul>\r\n                                <li>\r\n                                    <Button className=\"btn-link\" fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentSellModal}>\r\n                                        Sell Now\r\n                                    </Button>\r\n                                </li>\r\n                            </ul> \r\n                        }\r\n\r\n                        {allowance < sellPriceValue && <ul>\r\n                                <li>\r\n                                    <Button className=\"btn-link\" fullWidth variant=\"secondary\" mt=\"24px\" onClick={async () => {\r\n                                        try {\r\n                                        setPendingTx(true)\r\n                                        await onApprove()\r\n                                        setPendingTx(false)\r\n                                        } catch (e) {\r\n                                        setPendingTx(false)\r\n                                        console.error(e)\r\n                                        }\r\n                                    }}>\r\n                                        Approve Now\r\n                                    </Button>\r\n                                </li>\r\n                            </ul> \r\n                        }\r\n\r\n                            {/* Modal */}\r\n                            <div className=\"ctm-modal modal fade\" id=\"placeabid\" tabIndex={-1} aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog modal-dialog-centered\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-header\">\r\n                                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Place a Bid</h5>\r\n                                            <button type=\"button\" className=\"btn-close ctm-btnclose\" data-bs-dismiss=\"modal\" aria-label=\"Close\">CANCEL</button>\r\n                                        </div>\r\n                                        <div className=\"modal-body\">\r\n                                            <p>Your bid for <span>Vitruvian Androgyne</span></p>\r\n                                            <div className=\"vladamount-wrap\">\r\n                                                <div className=\"vbalance\">\r\n                                                    <input type=\"text\" className=\"form-control\" placeholder='0.0' />\r\n                                                </div>\r\n                                                <div className=\"vladamount\">\r\n                                                    <span>Vlad <span>($0.0)<img src=\"/assets/images/vladsm.svg\" alt=\"vlad logo\" /></span>\r\n                                                    </span></div>\r\n                                            </div>\r\n                                            <div className=\"amtrequired\">Must be at least <span>100 VLAD ($56.49)</span></div>\r\n                                            <hr />\r\n                                            <div className=\"amt-wrap\">\r\n                                                <div className=\"amt-title\">\r\n                                                    <span>Your VLAD balance</span>\r\n                                                    <span>Service fee (5%)</span>\r\n                                                    <span>You will pay</span>\r\n                                                </div>\r\n                                                <div className=\"amt-bal\">\r\n                                                    <span>86.001 VLAD</span>\r\n                                                    <span>0.501 VLAD</span>\r\n                                                    <span>0.501 VLAD</span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"btn-bidwrap\">\r\n                                                <button type='button' className=\"btn btn-primary\" data-bs-target=\"#placeabid2\" data-bs-toggle=\"modal\" data-bs-dismiss=\"modal\">Place a bid</button>\r\n                                            </div>\r\n                                            <div className=\"alertnote\">\r\n                                                <p><img src=\"/assets/images/alert-triangle.svg\" alt=\"alert icon\" />Not enough funds</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Second Modal */}\r\n                            <div className=\"ctm-modal modal fade\" id=\"placeabid2\" aria-hidden=\"true\" aria-labelledby=\"exampleModalToggleLabel2\" tabIndex={-1}>\r\n                                <div className=\"modal-dialog modal-dialog-centered\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-header\">\r\n                                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Place a Bid</h5>\r\n                                            <button type=\"button\" className=\"btn-close ctm-btnclose\" data-bs-dismiss=\"modal\" aria-label=\"Close\">CANCEL</button>\r\n                                        </div>\r\n                                        <div className=\"modal-body\">\r\n                                            <p>Your bid for <span>Vitruvian Androgyne</span></p>\r\n                                            <div className=\"vladamount-wrap\">\r\n                                                <div className=\"vbalance\"><input type=\"text\" className=\"form-control\" placeholder='0.0' /></div>\r\n                                                <div className=\"vladamount\">\r\n                                                    <span>Vlad <span>($69.42)<img src=\"/assets/images/vladsm.svg\" alt=\"vlad logo\" /></span>\r\n                                                    </span></div>\r\n                                            </div>\r\n                                            <div className=\"amtrequired\">Must be at least <span>100 VLAD ($56.49)</span></div>\r\n                                            <hr />\r\n                                            <div className=\"amt-wrap\">\r\n                                                <div className=\"amt-title\">\r\n                                                    <span>Your VLAD balance</span>\r\n                                                    <span>Service fee (5%)</span>\r\n                                                    <span>You will pay</span>\r\n                                                </div>\r\n                                                <div className=\"amt-bal\">\r\n                                                    <span>86.001 VLAD</span>\r\n                                                    <span>0.501 VLAD</span>\r\n                                                    <span>169.501 VLAD</span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"btn-bidwrap\">\r\n                                                <button type='button' className=\"btn btn-primary activebuy\" data-bs-target=\"#placeabid3\" data-bs-toggle=\"modal\" data-bs-dismiss=\"modal\">Next Step</button>\r\n                                            </div>\r\n                                            <div className=\"additionalnote\">\r\n                                                <p>5% fee will go to the artist and marketplace maintenance</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Third Modal */}\r\n                            <div className=\"ctm-modal modal fade\" id=\"placeabid3\" aria-hidden=\"true\" aria-labelledby=\"exampleModalToggleLabel2\" tabIndex={-1}>\r\n                                <div className=\"modal-dialog modal-dialog-centered\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-header\">\r\n                                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Place a Bid</h5>\r\n                                            <button type=\"button\" className=\"btn-close ctm-btnclose\" data-bs-dismiss=\"modal\" aria-label=\"Close\">CANCEL</button>\r\n                                        </div>\r\n                                        <div className=\"modal-body\">\r\n                                            <p><span className=\"cwhite\">Approve </span> the transaction from your wallet to continue.</p>\r\n                                            <hr />\r\n                                            <div className=\"btn-bidwrap\">\r\n                                                <button type='button' className=\"btn btn-primary cred btn-pending\" data-bs-target=\"#placeabid4\" data-bs-toggle=\"modal\" data-bs-dismiss=\"modal\"><i><img src=\"/assets/images/loader.svg\" alt=\"loader\" /></i>PENDING APPROVAL</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Fourth Modal */}\r\n                            <div className=\"ctm-modal modal fade\" id=\"placeabid4\" aria-hidden=\"true\" aria-labelledby=\"exampleModalToggleLabel2\" tabIndex={-1}>\r\n                                <div className=\"modal-dialog modal-dialog-centered\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-header\">\r\n                                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Place a Bid</h5>\r\n                                            <button type=\"button\" className=\"btn-close ctm-btnclose\" data-bs-dismiss=\"modal\" aria-label=\"Close\">CANCEL</button>\r\n                                        </div>\r\n                                        <div className=\"modal-body\">\r\n                                            <p><span className=\"cwhite\">Sign </span>and set your bid expiry time</p>\r\n                                            <div className=\"exptime\">\r\n                                                <ul>\r\n                                                    <li><Link to=\"/\" className=\"expbtnactive\">3 Days</Link></li>\r\n                                                    <li><Link to=\"/\">7 Days</Link></li>\r\n                                                    <li><Link to=\"/\">30 Days</Link></li>\r\n                                                    <li><Link to=\"/\">1 Year</Link></li>\r\n                                                </ul>\r\n                                            </div>\r\n                                            <div className=\"text-center\">\r\n                                                <p className=\"cgrey\">Your bid will expire on <span className=\"expday\">Jul 12</span> <span className=\"exphour\"> @ 23:34pm</span></p>\r\n                                                <hr />\r\n                                                <p className=\"cwhite\">You’re placing a bid for 169.501 VLAD</p>\r\n                                                <div className=\"btn-bidwrap\">\r\n                                                    <button type='button' className=\"btn btn-primary cred btn-pending\" data-bs-target=\"#placeabid5\" data-bs-toggle=\"modal\" data-bs-dismiss=\"modal\"><i><img src=\"/assets/images/loader.svg\" alt=\"loader\" /></i>PLACE BID</button>\r\n                                                </div>\r\n                                                <p className=\"cgrey\">When a bid is placed, your VLAD remains in your wallet. Vlad Finance marketplace smart contracts don&apos;t hold your VLAD. Keep it in your wallet if you want the bid to stay valid.</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Fifth Modal BID SUCCESS */}\r\n                            <div className=\"ctm-modal modal fade\" id=\"placeabid5\" aria-hidden=\"true\" aria-labelledby=\"exampleModalToggleLabel2\" tabIndex={-1}>\r\n                                <div className=\"modal-dialog modal-dialog-centered\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-header\">\r\n                                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Place a Bid</h5>\r\n                                            <button type=\"button\" className=\"btn-close ctm-btnclose\" data-bs-dismiss=\"modal\" aria-label=\"Close\">CANCEL</button>\r\n                                        </div>\r\n                                        <div className=\"modal-body success-body\">\r\n                                            <img src=\"/assets/images/check-circle.svg\" alt=\"success icon\" />\r\n                                            <p>Your bid has been placed!</p>\r\n                                            <p className=\"cgrey\">Please keep <span>[bid amount] </span>available in your wallet for the bid to be valid.</p>\r\n                                            <hr />\r\n                                            <p>Your bid will expire on Jul 12 @ 23:34pm</p>\r\n                                            <div className=\"btn-bidwrap\">\r\n                                                <button type='button' className=\"btn btn-primary activebuy\" data-bs-target=\"#transactionfailed\" data-bs-toggle=\"modal\" data-bs-dismiss=\"modal\">Done</button>\r\n                                            </div>\r\n                                            <div className=\"additionalnote\">\r\n                                                <p className=\"cwhite\">Your bid will expire on <span className=\"expday\">Jul 12</span> <span className=\"exphour\"> @ 23:34pm</span></p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Fifth Modal BID SUCCESS */}\r\n                            <div className=\"creator-wrap\">\r\n                                <div className=\"creator\">\r\n                                    <p>Creator</p>\r\n                                    <Link to={{ pathname: authorTwitter }}>{creator}</Link>\r\n                                </div>\r\n                                <div className=\"crecollection\">\r\n                                    <p>COLLECTION</p>\r\n                                    <Link to=\"/\">Vlad Genesis</Link>\r\n                                </div>\r\n                                <div className=\"clear-fix\" />\r\n                            </div>\r\n                            {/* Start of Small Tab */}\r\n                            <div className=\"smalltab\">\r\n                                <ul className=\"smalltab nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n                                    <li className=\"nav-item\" role=\"presentation\">\r\n                                        <button className=\"nav-link smtablink active\" id=\"pills-home-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-home\" type=\"button\" role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">DETAILS</button>\r\n                                    </li>\r\n                                    {/* <li className=\"nav-item\" role=\"presentation\">\r\n                                        <button className=\"nav-link smtablink\" id=\"pills-profile-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-profile\" type=\"button\" role=\"tab\" aria-controls=\"pills-profile\" aria-selected=\"false\">OFFERS</button>\r\n                                    </li>\r\n                                    <li className=\"nav-item\" role=\"presentation\">\r\n                                        <button className=\"nav-link smtablink\" id=\"pills-contact-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-contact\" type=\"button\" role=\"tab\" aria-controls=\"pills-contact\" aria-selected=\"false\">HISTORY</button>\r\n                                    </li> */}\r\n                                </ul>\r\n                                <div className=\"sm-tabcontent tab-content\" id=\"pills-tabContent\">\r\n                                    <div className=\"tab-pane fade show active\" id=\"pills-home\" role=\"tabpanel\" aria-labelledby=\"pills-home-tab\">\r\n                                        <table className=\"table table-borderless tabtable\">\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    <td className=\"tbldata-grey\">Trade ID</td>\r\n                                                    <td>#{id}</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td className=\"tbldata-grey\">Rarity Tier</td>\r\n                                                    <td>{rarity}</td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                    <div className=\"tab-pane fade\" id=\"pills-profile\" role=\"tabpanel\" aria-labelledby=\"pills-profile-tab\">\r\n                                        <div>\r\n                                            <p className=\"offer\">{new BigNumber(sellPriceValue).div(new BigNumber(10).pow(18)).toFixed()} VLAD <span>by</span> <Link to=\"/\">0x1b12n10...n128</Link></p>\r\n                                            <p className=\"time\"><span>7/6/2021,</span><span>1:01 PM</span></p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"tab-pane fade\" id=\"pills-contact\" role=\"tabpanel\" aria-labelledby=\"pills-contact-tab\">\r\n                                        <div className=\"historytab\">\r\n                                            <ul>\r\n                                                <li className=\"thumb\">\r\n                                                    <div className=\"historylist\">\r\n                                                        <p className=\"boldletter\">Bid accpeted <span className=\"whiteup\">10 VLAD</span></p>\r\n                                                        <p>By <span><Link to='/'>0x1b...6666 </Link></span>at <span>7/8/2021,</span><span> 9:55 PM</span></p>\r\n                                                    </div>\r\n                                                </li>\r\n                                                <li className=\"mintlayer\">\r\n                                                    <div className=\"historylist\">\r\n                                                        <p className=\"boldletter\">Bid <span className=\"whiteup\">10 VLAD</span></p>\r\n                                                        <p>By <span><Link to='/'>0x1b...6666 </Link></span>at <span>7/8/2021,</span><span> 9:55 PM</span></p>\r\n                                                    </div>\r\n                                                </li>\r\n                                                <li className=\"mintlayer2\">\r\n                                                    <div className=\"historylist\">\r\n                                                        <p className=\"boldletter\">Transfered to <Link to=\"/\">Sushinobi</Link></p>\r\n                                                        <p><span>7/8/2021,</span><span> 9:55 PM</span></p>\r\n                                                    </div>\r\n                                                </li>\r\n                                                <li className=\"updown\">\r\n                                                    <div className=\"historylist\">\r\n                                                        <p className=\"boldletter\">Minted by <Link to=\"/\">Sushinobi</Link></p>\r\n                                                        <p><span>7/8/2021,</span><span> 9:55 PM</span></p>\r\n                                                    </div>\r\n                                                </li>\r\n                                                <li className=\"mintcircle\">\r\n                                                    <div className=\"historylist\">\r\n                                                        <p className=\"boldletter\">Bid accpeted <span className=\"whiteup\">10 VLAD</span></p>\r\n                                                        <p>By <span><Link to='/'>0x1b...6666 </Link></span>at <span>7/8/2021,</span><span> 9:55 PM</span></p>\r\n                                                    </div>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n\r\n    );\r\n\r\n};\r\n\r\nexport default VLADCollectionDetail;\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useCake, useLottery } from './useContract'\r\nimport { getAllowance } from '../utils/erc20'\r\n\r\n// Retrieve lottery allowance\r\nexport const useLotteryAllowance = () => {\r\n  const [allowance, setAllowance] = useState(new BigNumber(0))\r\n  const { account }: { account: string } = useWallet()\r\n  const lotteryContract = useLottery()\r\n  const cakeContract = useCake()\r\n\r\n  useEffect(() => {\r\n    const fetchAllowance = async () => {\r\n      const res = await getAllowance(cakeContract, lotteryContract, account)\r\n      setAllowance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && cakeContract && cakeContract) {\r\n      fetchAllowance()\r\n    }\r\n    const refreshInterval = setInterval(fetchAllowance, 10000)\r\n    return () => clearInterval(refreshInterval)\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve IFO allowance\r\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\r\n  const { account }: { account: string } = useWallet()\r\n  const [allowance, setAllowance] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        setAllowance(null)\r\n      }\r\n    }\r\n    fetch()\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve NFT allowance\r\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\r\n  const { account }: { account: string } = useWallet()\r\n  const [allowance, setAllowance] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        console.log(e.toString())\r\n        setAllowance(null)\r\n      }\r\n    }\r\n    fetch()\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n\r\n// Approve an NFT\r\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n"],"sourceRoot":""}