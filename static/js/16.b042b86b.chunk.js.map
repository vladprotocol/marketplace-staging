{"version":3,"sources":["config/constants/newnfts.ts","views/MyNFT/components/NftCard/index.tsx","views/MyNFT/components/NftList.tsx","views/MyNFT/utils/contracts.ts","views/MyNFT/index.tsx"],"names":["NftFarm","NFT","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","rarity","NftCard","nft","currentTab","useState","isLoading","isOpen","nftCount","nftBurnCount","state","setState","console","log","useWallet","account","handleClick","prevState","className","href","tradeId","src","alt","authorName","onClick","onKeyDown","role","NftList","props","nfts","data","orderBy","map","getNewNftContract","contractOptions","nftAbi","nftFarm","getContract","MyNFT","accountEllipsis","substring","length","NFTs","setNFTs","setCurrentTab","setIsLoading","filterNFTs","useCallback","a","newNftContract","nftData","forEach","tradeIds","methods","getTradesByNftIdAndUser","call","isArray","push","getNftData","parseInt","setTimeout","error","filterListedNFTs","listOpenTradeIds","commonTradeIds","getListOpenTradesByNftId","filter","value","includes","handleTab","tab","nftDetailLink","nftPreviewImage","nftName","useEffect","id","type","PageLoader"],"mappings":"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","file":"static/js/16.b042b86b.chunk.js","sourcesContent":["import { Nft } from './types'\r\n\r\nexport const NftFarm = '0xe2Ca0a1A291f1b40406ea39cc095d90cfc4d393D'\r\nexport const NFT = '0xa81ab2d03b9e3a62bdbb837d417a5e221f754e14'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Pink Spider',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Laws are spider webs through which the big flies pass and the little ones get caught. Honore de Balzac',\r\n    previewImage: 'pink-spider-min.png',\r\n    originalImage:\r\n      'https://gateway.pinata.cloud/ipfs/QmZRVNLGYbjh2DaPuqcaQi51wXSjaxzGjAg24WviM5N8Tj',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 100,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Pink Fox',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'A fox is a wolf who sends flower. - Ruth Brown',\r\n    previewImage: 'pink-fox-min.png',\r\n    originalImage:\r\n      'https://gateway.pinata.cloud/ipfs/QmeDaRUcV3bp5oa6juNYYrV9G7o2zcKFcrRBJmPJxe6BQL',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 101,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Pink Bunny',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'I\\'m nutty bunny number two. I love me and I love you.',\r\n    previewImage: 'pink-bunny-min.png',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmWh9xNZvyhzQWFp4xFEjbBBXPBuZhYnQufL2HwRBae9Gn',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 102,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Pink Dragon',\r\n    metadata: '',\r\n    description: 'Everyone wants to live in a fairy tale, but donâ€™t forget there are dragons in those stories.',\r\n    previewImage: 'pink-dragon-min.png',\r\n    originalImage:\r\n      'https://gateway.pinata.cloud/ipfs/QmUBgkzR5rSLiWH9pgDACayjAQLcCfB8Csn81PVbTdB86t',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 103,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Pink B&B',\r\n    metadata: '',\r\n    description:\r\n      'Cheer the bull, or cheer the bear; cheer both, and you will be trampled and eaten. - Robert Jordan',\r\n    previewImage: 'bull-and-bear-min.png',\r\n    originalImage:\r\n      'https://gateway.pinata.cloud/ipfs/QmQ8MkJZzAQYNnUmzVXFmBQAZTXSjjvdvGVF3f16HP7LLW',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 104,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import React, { useState, useContext, useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { SellableNft } from 'config/constants/types'\r\n\r\n\r\ninterface NftCardProps {\r\n  nft: SellableNft,\r\n  currentTab: string\r\n}\r\n\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft, currentTab }) => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: false,\r\n    nftCount: 0,\r\n    nftBurnCount: 0,\r\n  })\r\n\r\n  console.log(\"state...\", state.isOpen);\r\n\r\n  const { account } = useWallet()\r\n\r\n\r\n\r\n  const handleClick = () => {\r\n    console.log(\"state\", state.isOpen);\r\n    if (state.isOpen) {\r\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n    } else {\r\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"cblock\">\r\n      <a href={`/shibari-detail/${nft.tradeId}`}>\r\n        <img src={`/images/nfts/${nft.previewImage}`} alt={nft.name} className=\"img-fluid\" />\r\n      </a>\r\n      <div className=\"cblock-content\">\r\n        <div className=\"cblock-headwrap\">\r\n          <a href={`/shibari-detail/${nft.tradeId}`}>\r\n            <div className=\"cblock-lefthead\">\r\n              <h6 className=\"inner-title\">{nft.name}</h6>\r\n              <p>{nft.authorName}</p>\r\n            </div>\r\n          </a>\r\n          {currentTab === 'owned' &&\r\n            (\r\n              <div className=\"owdetails-head\">\r\n                <i>\r\n                  <img src=\"/assets/images/arrow-downsm.svg\" className={`arrow-icon ${state.isOpen ? 'active' : ''}`} alt=\"arrow\" />\r\n                </i>\r\n                <span className=\"details-text\" onClick={handleClick} onKeyDown={handleClick} role=\"presentation\"> Details </span>\r\n              </div>\r\n            )\r\n          }\r\n\r\n          {state.isOpen && (\r\n            <div className=\"details-answer-new\">\r\n              {nft.description}\r\n            </div>\r\n          )}\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport NftCard from './NftCard'\r\n\r\nconst NftList = (props) => {\r\n  const { data: nfts, currentTab } = props\r\n  return (\r\n    <div className=\"row\">\r\n      {orderBy(nfts, 'sortOrder').map((nft) => (\r\n        <div className=\"col-sm-12 col-md-4\" key={nft.nftId}>\r\n          <NftCard nft={nft} currentTab={currentTab} />\r\n        </div>\r\n      ))}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/newnfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { isArray } from 'lodash'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Link } from 'react-router-dom';\r\nimport nfts from 'config/constants/newnfts'\r\nimport PageLoader from 'components/PageLoader';\r\nimport NftList from './components/NftList'\r\nimport { getNewNftContract } from './utils/contracts'\r\n\r\n\r\nconst MyNFT = () => {\r\n\r\n  const { account } = useWallet()\r\n\r\n  const accountEllipsis = account ? `${account.substring(0, 4)}...${account.substring(account.length - 4)}` : null\r\n\r\n  const [NFTs, setNFTs] = useState([])\r\n  const [currentTab, setCurrentTab] = useState('owned');\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const filterNFTs = useCallback(async (rarity = '') => {\r\n    try {\r\n\r\n      setIsLoading(true);\r\n\r\n      const newNftContract = getNewNftContract()\r\n\r\n      const nftData = []\r\n\r\n\r\n      nfts.forEach(async (nft) => {\r\n        let tradeIds = [];\r\n        if(account) {\r\n          tradeIds = await newNftContract.methods.getTradesByNftIdAndUser(account, nft.nftId).call()\r\n        }\r\n        if (isArray(tradeIds) && tradeIds.length > 0) {\r\n          tradeIds.forEach((tradeId) => {\r\n            nftData.push(getNftData(parseInt(tradeId, 10), nft.nftId))\r\n          })\r\n        }\r\n      })\r\n      setNFTs(nftData);\r\n\r\n      setTimeout(()=>{\r\n        setIsLoading(false);\r\n      }, 1000);\r\n      \r\n    } catch (error) {\r\n      console.log(\"error\");\r\n      console.error(error);\r\n    }\r\n  }, [account])\r\n\r\n  const filterListedNFTs = useCallback(async () => {\r\n    try {\r\n\r\n      setIsLoading(true);\r\n\r\n      const newNftContract = getNewNftContract()\r\n\r\n      const nftData = []\r\n    \r\n      nfts.forEach(async (nft) => {\r\n        let tradeIds = [];\r\n        let listOpenTradeIds = [];\r\n        let commonTradeIds = []\r\n        if(account) {\r\n          tradeIds = await newNftContract.methods.getTradesByNftIdAndUser(account, nft.nftId).call()\r\n          listOpenTradeIds = await newNftContract.methods.getListOpenTradesByNftId(nft.nftId).call()\r\n          commonTradeIds = tradeIds.filter(value => listOpenTradeIds.includes(value));\r\n        }\r\n        if (isArray(commonTradeIds) && commonTradeIds.length > 0) {\r\n          commonTradeIds.forEach((tradeId) => {\r\n            nftData.push(getNftData(parseInt(tradeId, 10), nft.nftId))\r\n          })\r\n        }\r\n      })\r\n      setNFTs(nftData);\r\n\r\n      setTimeout(()=>{\r\n        setIsLoading(false);\r\n      }, 1000);\r\n\r\n    } catch (error) {\r\n      console.log(\"error\");\r\n      console.error(error);\r\n    }\r\n  }, [account])\r\n\r\n  const handleTab = (tab) => {\r\n    setCurrentTab(tab);\r\n  }\r\n\r\n\r\n  const getNftData = (tradeId: number, nft: number) => {\r\n    try {\r\n      const nftDetailLink = `/new-detail/${nft}`\r\n      const nftPreviewImage = nfts.filter((data) => nft === data.nftId).map((data) => data.previewImage)\r\n      const nftName = nfts.filter((data) => nft === data.nftId).map((data) => data.name)\r\n      const description = nfts.filter((data) => nft === data.nftId).map((data) => data.description)\r\n\r\n      return {\r\n        tradeId,\r\n        name: nftName[0] || '',\r\n        description: description[0] || '',\r\n        previewImage: nftPreviewImage[0] || '',\r\n        nftDetailLink,\r\n        nftId: nft,\r\n      }\r\n    } catch (error) {\r\n      return null\r\n    }\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if(currentTab === 'owned') {\r\n      filterNFTs()\r\n    } else if(currentTab === 'listed') {\r\n      setNFTs([]);\r\n      filterListedNFTs()\r\n    }\r\n  }, [filterNFTs, filterListedNFTs, currentTab])\r\n\r\n    return (\r\n      <section className=\"vcollectionsec\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12 mb-5\">\r\n              <div className=\"nfthead\">\r\n                <div>\r\n                  <img src=\"assets/images/Ellipse.png\" alt=\"eclipse\" className=\"img-fluid\" />\r\n                </div>\r\n                <div className=\"nftname\">\r\n                  <h5 className=\"inner-title\">{accountEllipsis}</h5>\r\n                  <span>{NFTs.length} NFT(s) in Account</span>\r\n                </div>\r\n              </div>\r\n              \r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12\">\r\n              {/* Start of Small Tab */}\r\n              <ul className=\"bigtab nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n                <li className=\"nav-item\" role=\"presentation\">\r\n                  <button\r\n                    className={`nav-link bigtablink ${currentTab === 'owned' ? 'active' : ''}`}\r\n                    id=\"pills-home-tab\"\r\n                    data-bs-toggle=\"pill\"\r\n                    data-bs-target=\"#woed-home\"\r\n                    type=\"button\"\r\n                    role=\"tab\"\r\n                    aria-controls=\"pills-home\"\r\n                    aria-selected=\"true\"\r\n                    onClick={() => handleTab('owned')}\r\n                  >\r\n                    OWNED\r\n                  </button>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <button\r\n                    className={`nav-link bigtablink ${currentTab === 'listed' ? 'active' : ''}`}\r\n                    type=\"button\"\r\n                    onClick={() => handleTab('listed')}\r\n                  >\r\n                    LISTED\r\n                  </button>\r\n                </li>\r\n                {/* <li className=\"nav-item\" role=\"presentation\">\r\n                  <button\r\n                    className=\"nav-link bigtablink\"\r\n                    id=\"pills-contact-tab\"\r\n                    data-bs-toggle=\"pill\"\r\n                    data-bs-target=\"#offers-block\"\r\n                    type=\"button\"\r\n                    role=\"tab\"\r\n                    aria-controls=\"pills-contact\"\r\n                    aria-selected=\"false\"\r\n                  >\r\n                    OFFERS\r\n                  </button>\r\n                </li>\r\n                <li className=\"nav-item\" role=\"presentation\">\r\n                  <button\r\n                    className=\"nav-link bigtablink\"\r\n                    id=\"pills-profile-tab\"\r\n                    data-bs-toggle=\"pill\"\r\n                    data-bs-target=\"#history-tab\"\r\n                    type=\"button\"\r\n                    role=\"tab\"\r\n                    aria-controls=\"pills-profile\"\r\n                    aria-selected=\"false\"\r\n                  >\r\n                    HISTORY\r\n                  </button>\r\n                </li> */}\r\n              </ul>\r\n              <div className=\"big-tabcontent tab-content\" id=\"pills-tabContent\">\r\n                {/* Start of OWED BLOCK CONTENT */}\r\n                <div\r\n                  className=\"tab-pane fade show active\"\r\n                  id=\"woed-home\"\r\n                  role=\"tabpanel\"\r\n                  aria-labelledby=\"pills-home-tab\"\r\n                >\r\n                {isLoading ? <PageLoader /> : <NftList data={NFTs} currentTab={currentTab} />}\r\n                \r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n};\r\n\r\nexport default MyNFT;"],"sourceRoot":""}