{"version":3,"sources":["views/VLADCollection/utils/contracts.ts","hooks/useBlock.ts","views/VLADCollection/components/NftCard/index.tsx","views/VLADCollection/components/NftList.tsx","config/constants/nfts.ts","views/VLADCollection/contexts/NftProvider.tsx","views/VLADCollection/index.tsx"],"names":["getNftContract","contractOptions","nftAbi","nft","getContract","NFT","getNewNftContract","nftFarm","NftFarm","getFromWei","v","parseFloat","fromWei","toString","getFromWayArray","array","t","length","i","push","getToFloat","parseInt","getToInt","useBlock","useContext","BlockContext","NftCard","className","to","trade","src","previewImage","alt","name","pathname","authorTwitter","authorName","BigNumber","sellPrice","div","pow","toFixed","NftList","props","nfts","data","orderBy","map","nftId","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","account","useWallet","console","log","currentBlock","useEffect","a","multicall","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","error","fetchContractData","nftContract","params","getMinted","methods","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","VLADCollection","NFTs","setNFTs","filterNFTs","useCallback","filteredNFTs","filter","newNftContract","sellableNFTs","forEach","nftSecondaryMarket","nftInfo","allowSell","sellMinPrice","totalArtistFee","totalGovernanceFee","lastSellIn","lastSellPrice","qtdSells","totalCollected","totalDevFee","getListOpenTradesByNftId","sellableTradeIds","totalQuantity","Array","isArray","nftSecondaryTradeInfo","sellDate","soldDate","tmpObj","id","role","data-bs-toggle","data-bs-target","type","aria-controls","aria-selected","aria-expanded","htmlFor","aria-labelledby"],"mappings":"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","file":"static/js/9.5fb3ff23.chunk.js","sourcesContent":["import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/newnfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","import React, { useState, useContext, useCallback } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { SellableNft } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n\r\ninterface NftCardProps {\r\n  nft: SellableNft\r\n}\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n\r\n  return (\r\n    <div className=\"vcblock\">\r\n      <Link to={`/vlad-detail/${nft.trade}`}>\r\n        <img src={`/images/nfts/${nft.previewImage}`} alt={nft.name} className=\"img-fluid\" />\r\n      </Link>\r\n      <div className=\"vcblockhead\">\r\n        <Link to={`/vlad-detail/${nft.trade}`}>\r\n          <h6 className=\"inner-title\">{nft.name}</h6>\r\n        </Link>\r\n        <p>By <Link to={{ pathname: nft.authorTwitter }} >{nft.authorName}</Link></p>\r\n        <div className=\"vcblock-smcontent\">\r\n          <p>On Sell for <span className=\"b\">{new BigNumber(nft.sellPrice).div(new BigNumber(10).pow(18)).toFixed()} ALIFE </span></p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport NftCard from './NftCard'\r\n\r\nconst NftList = (props) => {\r\n  const { data: nfts } = props\r\n  return (\r\n    <div className=\"row\">\r\n      {orderBy(nfts, 'sortOrder').map((nft) => (\r\n        <div className=\"col-sm-12 col-md-4\" key={nft.nftId}>\r\n          <NftCard nft={nft} />\r\n        </div>\r\n      ))}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import { Nft } from './types'\r\n\r\nexport const NftFarm = '0xaBa054F1437aEBEa43fB0804b734DdB3F39FB62F'\r\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Count Pepes Chocula',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-dark-chocolate.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 0,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Vlad Pepes Drakul',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\r\n    previewImage: 'preview-base-main-nopaint.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 1,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Pepes in Stone',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-marble.jpg',\r\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 2,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'The path to Vladhalla',\r\n    metadata: '',\r\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\r\n    previewImage: 'preview-path-to-vladhalla.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 3,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Painted Pepe',\r\n    metadata: '',\r\n    description:\r\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\r\n    previewImage: 'preview-painted-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 4,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 5,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport { NftFarm } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype BunnyMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  ownerById: number[]\r\n  amounts: number[]\r\n  maxMintByNft: number[]\r\n  prices: number[]\r\n  myMints: number[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: BunnyMap\r\n\r\n  allowMultipleClaims: boolean\r\n  rarity: string\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n  tokenPerBurn: number\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    ownerById: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    rarity: '',\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n    tokenPerBurn: 0,\r\n\r\n    amounts: [],\r\n    maxMintByNft: [],\r\n    prices: [],\r\n    myMints: [],\r\n  })\r\n  const { account } = useWallet()\r\n  console.log(\"account\", account);\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const [\r\n          startBlockNumberArr,\r\n          endBlockNumberArr,\r\n          countBurntArr,\r\n          totalSupplyDistributedArr,\r\n          currentDistributedSupplyArr,\r\n\r\n          allowMultipleClaimsArr,\r\n          rarityArr,\r\n          priceMultiplierArr,\r\n          maxMintPerNftArr,\r\n          tokenPerBurnArr,\r\n        ] = await multicall(nftFarm, [\r\n          { address: NftFarm, name: 'startBlockNumber' },\r\n          { address: NftFarm, name: 'endBlockNumber' },\r\n          { address: NftFarm, name: 'countBurnt' },\r\n          { address: NftFarm, name: 'totalSupplyDistributed' },\r\n          { address: NftFarm, name: 'currentDistributedSupply' },\r\n          { address: NftFarm, name: 'allowMultipleClaims' },\r\n          { address: NftFarm, name: 'rarity' },\r\n          { address: NftFarm, name: 'priceMultiplier' },\r\n          { address: NftFarm, name: 'maxMintPerNft' },\r\n          { address: NftFarm, name: 'tokenPerBurn' },\r\n        ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        const [countBurnt]: [BigNumber] = countBurntArr\r\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          countBurnt: countBurnt.toNumber(),\r\n          startBlockNumber: startBlockNumber.toNumber(),\r\n          endBlockNumber: endBlockNumber.toNumber(),\r\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          rarity: rarityArr[0].toString(),\r\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\r\n\r\n        // console.log('getMinted', getMinted)\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const ownerById = getMinted[0][2]\r\n        const maxMintByNft = getToInt(getMinted[0][3])\r\n        const prices = getFromWayArray(getMinted[0][4])\r\n        const myMints = getToInt(getMinted[0][5])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('ownerById', ownerById)\r\n        // console.log('maxMintByNft', maxMintByNft)\r\n        // console.log('prices', prices)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        let nftMap: BunnyMap = {}\r\n\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndBunnyId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\r\n\r\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          ownerById,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          maxMintByNft,\r\n          prices,\r\n          myMints,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    const fetchNonLoggedInContractData = async () => {\r\n      try {\r\n        const getMinted = await multicall(nftFarm, [\r\n          { address: NftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\r\n        ])\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          amounts,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    } else {\r\n      fetchNonLoggedInContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport nfts from 'config/constants/newnfts'\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport { getNewNftContract } from './utils/contracts'\r\n\r\nconst VLADCollection = () => {\r\n\r\n  const [NFTs, setNFTs] = useState(nfts)\r\n\r\n  const filterNFTs = useCallback(async (rarity = '') => {\r\n\r\n    const filteredNFTs = rarity !== '' ? nfts.filter((nft) => nft.rarity === rarity) : nfts;\r\n\r\n    const newNftContract = getNewNftContract()\r\n\r\n    const sellableNFTs = [];\r\n    filteredNFTs.forEach(async (nft) => {\r\n      const nftSecondaryMarket = await newNftContract.methods.nftSecondaryMarket(nft.nftId).call()\r\n      const nftInfo = await newNftContract.methods.nftInfo(nft.nftId).call();\r\n      const { authorName, authorTwitter } = nftInfo;\r\n      const { allowSell, sellMinPrice, totalArtistFee, totalGovernanceFee, lastSellIn, lastSellPrice, qtdSells, totalCollected, totalDevFee } = nftSecondaryMarket;\r\n      if (nftSecondaryMarket.allowSell === true) {\r\n        const sellableTradeIds = await newNftContract.methods.getListOpenTradesByNftId(nft.nftId).call()\r\n        const totalQuantity = Array.isArray(sellableTradeIds) && sellableTradeIds.length\r\n\r\n        sellableTradeIds.forEach(async (trade) => {\r\n          const nftSecondaryTradeInfo = await newNftContract.methods.nftSecondaryTradeInfo(trade).call()\r\n          const { sellPrice, sellDate, soldDate } = nftSecondaryTradeInfo;\r\n\r\n          const tmpObj = {\r\n            ...nft,\r\n            allowSell,\r\n            sellMinPrice,\r\n            totalArtistFee,\r\n            totalGovernanceFee,\r\n            lastSellIn,\r\n            lastSellPrice,\r\n            qtdSells,\r\n            totalCollected,\r\n            totalDevFee,\r\n            trade,\r\n            totalQuantity,\r\n            authorName,\r\n            authorTwitter,\r\n            sellPrice,\r\n            sellDate,\r\n            soldDate,\r\n          }\r\n          sellableNFTs.push(tmpObj);\r\n        })\r\n      }\r\n    })\r\n    setNFTs(sellableNFTs)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    filterNFTs()\r\n  }, [filterNFTs])\r\n\r\n  return (\r\n    <NftProvider>\r\n      <section className=\"vcollectionsec\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12 mb-5 vchead\">\r\n              <h3>VLAD NFT Facts</h3>\r\n              <div className=\"vctab-wrap\">\r\n                <ul className=\"vctab nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink active\" id=\"pills-home-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-home\" type=\"button\" role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">ALL</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink\" id=\"pills-profile-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-profile\" type=\"button\" role=\"tab\" aria-controls=\"pills-profile\" >FOR SALE</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink\" id=\"pills-contact-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-contact\" type=\"button\" role=\"tab\" aria-controls=\"pills-contact\" >BID</button>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12\">\r\n              <div className=\"pricefilterwrap\">\r\n                <ul className=\"nav nav-pills pricefilterpills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link pricelink active\" id=\"pills-home-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#price-lowest\" type=\"button\" role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">Price - Lowest</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link pricelink\" id=\"pills-profile-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#price-highest\" type=\"button\" role=\"tab\" aria-controls=\"pills-profile\" aria-selected=\"false\">Price - Highest</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link pricelink\" id=\"pills-contact-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#rarity-rare\" type=\"button\" role=\"tab\" aria-controls=\"pills-contact\" aria-selected=\"false\">Rarity - Rare</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link pricelink\" id=\"pills-contact-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#rarity-common\" type=\"button\" role=\"tab\" aria-controls=\"pills-contact\" aria-selected=\"false\">Rarity - Common</button>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <div className=\"vc-filter vc-explore\">\r\n                <ul className=\"nav vc-nav nav-pills\">\r\n                  <li className=\"nav-item vcdropdown pricedropdown dropdown\">\r\n                    <Link className=\"nav-link vcdropdown-toggle dropdown-toggle dropbtn\" data-bs-toggle=\"dropdown\" to=\"/\" role=\"button\" aria-expanded=\"false\">Filter <img src=\"assets/images/settings-filter.svg\" alt=\"filter-icon\" className=\"img-fluid\" /></Link>\r\n                    <div className=\"dropdown-content\">\r\n                      <p>Format</p>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            GIF\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"count\">23</div>\r\n                      </Link>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            JPG\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"count\">1009</div>\r\n                      </Link>\r\n                      <hr className=\"seperator\" />\r\n                      <p>Rarity</p>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Base\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"count\">6,666</div>\r\n                      </Link>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Rare\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"count\">1,998</div>\r\n                      </Link>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Epic\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"count\">198</div>\r\n                      </Link>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">Legendary</label>\r\n                        </div>\r\n                        <div className=\"count\">18</div>\r\n                      </Link>\r\n                    </div>\r\n                  </li>\r\n                  {/* <li class=\"nav-item vcdropdown pricedropdown dropdown\">\r\n                    <a class=\"nav-link vcdropdown-toggle dropdown-toggle dropbtn\" data-bs-toggle=\"dropdown\" href=\"#\" role=\"button\" aria-expanded=\"false\">Rarity <img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"down-arrow\"></a>\r\n                    <div class=\"dropdown-content\">\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"down-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"down-arrow\"></div>\r\n                        </a>\r\n                        <P>Rarity</P>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">Legendary</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                    </div>\r\n                  </li> */}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* Start of Price Filter Tab */}\r\n          <div className=\"row\">\r\n            <div className=\"tab-content pricetabcontent\" id=\"pills-tabContent\">\r\n              <div className=\"tab-pane fade\" id=\"price-highest\" role=\"tabpanel\" aria-labelledby=\"pills-profile-tab\">Price - Highest</div>\r\n              <div className=\"tab-pane fade\" id=\"rarity-rare\" role=\"tabpanel\" aria-labelledby=\"pills-contact-tab\">Rarity - Rare</div>\r\n              <div className=\"tab-pane fade\" id=\"rarity-common\" role=\"tabpanel\" aria-labelledby=\"pills-contact-tab\">Rarity - Common</div>\r\n            </div>\r\n          </div>\r\n          {/* End of Price Filter Tab */}\r\n        </div>\r\n        {/* Slider */}\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"ctab-content tab-content\" id=\"pills-tabContent\">\r\n              <div className=\"tab-pane fade show active ctabpane\" id=\"pills-home\" role=\"tabpanel\" aria-labelledby=\"pills-home-tab\">\r\n                <NftList data={NFTs} />\r\n              </div>\r\n              {/* END OF ALL TAB */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </NftProvider>\r\n  );\r\n\r\n};\r\n\r\nexport default VLADCollection;\r\n"],"sourceRoot":""}