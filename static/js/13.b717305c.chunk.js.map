{"version":3,"sources":["hooks/useBlock.ts","views/NftMarketplace/components/InfoRow.tsx","views/NftMarketplace/components/Image.tsx","views/NftMarketplace/utils/contracts.ts","views/NftMarketplace/contexts/NftProvider.tsx","views/NftMarketplace/components/NftCard/index.tsx","views/NftMarketplace/components/NftGrid.tsx","views/NftMarketplace/components/NftList.tsx","views/NftMarketplace/components/NftProgressSimple.tsx","views/NftMarketplace/components/NftInfo.tsx","views/NftMarketplace/index.tsx"],"names":["useBlock","useContext","BlockContext","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getContract","NFT","getNewNftContract","nftFarm","NftFarm","getFromWayArray","v","array","t","length","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","isApproved","state","setState","account","useWallet","currentBlock","useEffect","a","prevState","error","console","fetchContractData","nftContract","multicall","nftFarmV2","address","name","params","getMinted","methods","call","isApprovedForAll","getTokenIdAndNftId","index","tokenOfOwnerByIndex","tokenId","getNftId","nftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Header","NftCard","Button","attrs","variant","fullWidth","Text","minTradeId","isLoading","isOpen","nftCount","nftBurnCount","setMinted","setMaxMint","BigNumber","setPrice","TranslateString","useI18n","useHistory","setRequestedApproval","setIsLoading","setError","originalImage","sellMinPrice","description","tokenAmount","tokenSupply","sellableTradeIds","totalQuantity","_","size","Math","min","slice","nftIndex","indexOf","MINTS","newFarmContract","nftInfoState","mintedValue","minted","maxMintValue","maxMint","priceValue","price","pow","getNftInfoState","walletOwnsNft","fetchDetails","useCallback","isDataFetched","usePancakeRabbits","handleApprove","setApprovalForAll","send","from","on","log","useNFTFarmV2Contract","handleBuy","buy","isActive","outline","mt","onClick","NftGrid","BaseLayout","mediaQueries","sm","NftList","props","nfts","data","orderBy","map","NftProgressSimple","NftInfo","StyledHero","textSubtle","CustomButton","GoldenButton","NftMarketplace","NFTs","setNFTs","filterNFTs","filteredNFTs","filter","newNftContract","sellableNFTs","forEach","nftSecondaryMarket","allowSell","totalArtistFee","totalGovernanceFee","lastSellIn","lastSellPrice","qtdSells","totalCollected","totalDevFee","getListOpenTradesByNftId","Array","isArray","tmpObj","Page","as","color","mb"],"mappings":"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","file":"static/js/13.b717305c.chunk.js","sourcesContent":["import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface ImageProps {\r\n  src: string\r\n  alt: string\r\n  originalLink: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 32px 32px 0 0;\r\n`\r\n\r\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\r\n  const previewImage = <StyledImage src={src} alt={alt} />\r\n\r\n  return (\r\n    <Container>\r\n      {originalLink ? (\r\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/newnfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\r\nimport { NftFarm } from 'config/constants/newnfts'\r\nimport multicall from 'utils/multicall'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype NftMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  ownerById: number[]\r\n  amounts: number[]\r\n  maxMintByNft: number[]\r\n  prices: number[]\r\n  myMints: number[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: NftMap\r\n\r\n  allowMultipleClaims: boolean\r\n  rarity: string\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n  tokenPerBurn: number\r\n  isApproved: boolean\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    ownerById: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    rarity: '',\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n    tokenPerBurn: 0,\r\n\r\n    amounts: [],\r\n    maxMintByNft: [],\r\n    prices: [],\r\n    myMints: [],\r\n    isApproved: false,\r\n  })\r\n  const { account } = useWallet()\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        // const [\r\n        //   // startBlockNumberArr,\r\n        //   // endBlockNumberArr,\r\n        //   // countBurntArr,\r\n        //   // totalSupplyDistributedArr,\r\n        //   // currentDistributedSupplyArr,\r\n\r\n        //   // allowMultipleClaimsArr,\r\n        //   // rarityArr,\r\n        //   // priceMultiplierArr,\r\n        //   // maxMintPerNftArr,\r\n        //   // tokenPerBurnArr,\r\n        // ] = await multicall(nftFarm, [\r\n        //   // { address: NftFarm, name: 'startBlockNumber' },\r\n        //   // { address: NftFarm, name: 'endBlockNumber' },\r\n        //   // { address: NftFarm, name: 'countBurnt' },\r\n        //   // { address: NftFarm, name: 'totalSupplyDistributed' },\r\n        //   // { address: NftFarm, name: 'currentDistributedSupply' },\r\n        //   // { address: NftFarm, name: 'allowMultipleClaims' },\r\n        //   // { address: NftFarm, name: 'rarity' },\r\n        //   // { address: NftFarm, name: 'priceMultiplier' },\r\n        //   // { address: NftFarm, name: 'maxMintPerNft' },\r\n        //   // { address: NftFarm, name: 'tokenPerBurn' },\r\n        // ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        // const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        // const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        // const [countBurnt]: [BigNumber] = countBurntArr\r\n        // const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        // const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          // countBurnt: countBurnt.toNumber(),\r\n          // startBlockNumber: startBlockNumber.toNumber(),\r\n          // endBlockNumber: endBlockNumber.toNumber(),\r\n          // currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          // totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          // allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          // rarity: rarityArr[0].toString(),\r\n          // priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          // maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n          // tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const getMinted = await multicall(nftFarmV2, [{ address: NftFarm, name: 'getMinted', params: [account] }])\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const ownerById = getMinted[0][2]\r\n        const maxMintByNft = getToInt(getMinted[0][3])\r\n        const prices = getFromWayArray(getMinted[0][4])\r\n        const myMints = getToInt(getMinted[0][5])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('ownerById', ownerById)\r\n        // console.log('maxMintByNft', maxMintByNft)\r\n        // console.log('prices', prices)\r\n        // console.log('myMints', myMints)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        let nftMap: NftMap = {}\r\n\r\n        const isApproved = await nftContract.methods.isApprovedForAll(account, NftFarm).call()\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndNftId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getNftId(tokenId).call()\r\n\r\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndNftId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          ownerById,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          maxMintByNft,\r\n          prices,\r\n          myMints,\r\n          isApproved,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    const fetchNonLoggedInContractData = async () => {\r\n      try {\r\n        const getMinted = await multicall(nftFarmV2, [\r\n          { address: NftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\r\n        ])\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          amounts,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    } else {\r\n      fetchNonLoggedInContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import React, { useState, useContext, useCallback, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n} from '@pancakeswap-libs/uikit'\r\nimport _ from 'lodash'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft, SellableNft } from 'config/constants/types'\r\nimport { AMOUNT_TO_CLAIM, NftFarm, NFT } from 'config/constants/newnfts'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { usePancakeRabbits, useNFTFarmV2Contract } from 'hooks/useContract'\r\nimport InfoRow from '../InfoRow'\r\nimport Image from '../Image'\r\nimport { NftProviderContext } from '../../contexts/NftProvider'\r\nimport { getNewNftContract } from '../../utils/contracts'\r\n\r\ninterface NftCardProps {\r\n  nft: SellableNft\r\n}\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 44px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 0 24px 24px;\r\n`\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ViewNft = styled(Text)`\r\n  @media (max-width: 1300px) {\r\n    font-size: 11px;\r\n  }\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: false,\r\n    nftCount: 0,\r\n    nftBurnCount: 0,\r\n  })\r\n  const [minted, setMinted] = useState(0)\r\n  const [maxMint, setMaxMint] = useState(0)\r\n  const [price, setPrice] = useState(new BigNumber(0))\r\n  const TranslateString = useI18n()\r\n  const {\r\n    isInitialized,\r\n    hasClaimed,\r\n    ownerById,\r\n    canBurnNft,\r\n    totalSupplyDistributed,\r\n    currentDistributedSupply,\r\n    getTokenIds,\r\n    reInitialize,\r\n    allowMultipleClaims,\r\n    rarity,\r\n    priceMultiplier,\r\n    maxMintPerNft,\r\n    tokenPerBurn,\r\n    amounts,\r\n    maxMintByNft,\r\n    prices,\r\n    myMints,\r\n    isApproved,\r\n  } = useContext(NftProviderContext)\r\n  const { account } = useWallet()\r\n  const history = useHistory()\r\n\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const [error, setError] = useState(null)\r\n  // maxMintPerNft limit max amount that a nft can be minted\r\n  // maxMintByNft array containing individual amount of mint per nft index\r\n  // prices array containing individual prices of a mint per nft index\r\n  // tokenPerBurn global price\r\n\r\n  const { nftId, name, previewImage, originalImage, description, tokenAmount, tokenSupply, sellMinPrice, sellableTradeIds, totalQuantity } = nft\r\n  const PRICE = prices[nftId] || tokenPerBurn // here we get the price\r\n\r\n  let minTradeId:number;\r\n  if(typeof sellableTradeIds === 'object' && _.size(sellableTradeIds) > 0) {\r\n    minTradeId = Math.min( ...sellableTradeIds )\r\n  }\r\n\r\n  const firstCharOfAccount = account != null && account.slice(0, 4)\r\n  const lastCharOfAccount = account != null && account.slice(-4)\r\n\r\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\r\n\r\n  const MINTS = myMints[nftIndex] || 0\r\n\r\n\r\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\r\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\r\n\r\n\r\n  useEffect(() => {\r\n    const getNftInfoState = async () => {\r\n      const newFarmContract = getNewNftContract()\r\n      const nftInfoState = await newFarmContract.methods.nftInfoState(nftId).call()\r\n      const { minted: mintedValue, maxMint: maxMintValue, price: priceValue } = nftInfoState\r\n      setMinted(parseInt(mintedValue))\r\n      setMaxMint(parseInt(maxMintValue))\r\n      setPrice(new BigNumber(priceValue).div(new BigNumber(10).pow(18)))\r\n    }\r\n    getNftInfoState()\r\n  }, [nftId, isInitialized])\r\n\r\n  // const walletOwnsNft = tokenIds && tokenIds.length > 0\r\n  const walletOwnsNft = MINTS > 0\r\n\r\n  const fetchDetails = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      const { methods } = getNewNftContract()\r\n      const nftCount = await methods.nftCount(nftId).call()\r\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        nftCount: parseInt(nftCount, 10),\r\n        nftBurnCount: parseInt(nftBurnCount, 10),\r\n      }))\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n  }, [nftId])\r\n\r\n\r\n  const nftContract = usePancakeRabbits(NFT)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setState((prevState) => ({ ...prevState, isLoading: true }))\r\n      setRequestedApproval(true)\r\n      await nftContract.methods\r\n        .setApprovalForAll(NftFarm, 'true')\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          console.log('receipt')\r\n        })\r\n        .on('error', () => {\r\n          setError('Unable to transfer NFT')\r\n          setIsLoading(false)\r\n        })\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n      }))\r\n\r\n      fetchDetails()\r\n      reInitialize()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [account, nftContract, reInitialize, fetchDetails])\r\n\r\n  const newFarmContract = useNFTFarmV2Contract(NftFarm)\r\n  const handleBuy = useCallback(async () => {\r\n    try {\r\n\r\n      setState((prevState) => ({ ...prevState, isLoading: true }))\r\n      await newFarmContract.methods\r\n        .buy(minTradeId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          console.log('receipt')\r\n        })\r\n        .on('error', () => {\r\n          setError('Unable to buy NFT')\r\n          setIsLoading(false)\r\n        })\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n      }))\r\n\r\n      fetchDetails()\r\n      reInitialize()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [account, newFarmContract, reInitialize, fetchDetails, minTradeId])\r\n\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft}>\r\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          <Tag outline variant=\"failure\">\r\n            {totalQuantity} {' for Sale'}\r\n          </Tag>\r\n        </Header>\r\n\r\n        <Header>\r\n          <Tag outline variant=\"primary\">\r\n            {sellMinPrice / 10 ** 18}\r\n          </Tag>\r\n        </Header>\r\n        {isInitialized && walletOwnsNft && !isApproved && (\r\n          <Button\r\n            fullWidth\r\n            variant=\"primary\"\r\n            mt=\"24px\"\r\n            onClick={() => {\r\n              handleApprove()\r\n            }}\r\n          >\r\n            Approve\r\n          </Button>\r\n        )}\r\n        {isInitialized && walletOwnsNft && isApproved && (\r\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={() => {\r\n            handleBuy()\r\n          }}>\r\n            {TranslateString(999, 'Buy')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import styled from 'styled-components'\r\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\r\n\r\nconst NftGrid = styled(BaseLayout)`\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n\r\n  & > div {\r\n    grid-column: 2 / 6;\r\n\r\n    ${({ theme }) => theme.mediaQueries.sm} {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nexport default NftGrid\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\n\r\nconst NftList = (props) => {\r\n  const { data: nfts } = props\r\n  return (\r\n    <NftGrid>\r\n      {orderBy(nfts, 'sortOrder').map((nft) => (\r\n        <div key={nft.nftId}>\r\n          <NftCard nft={nft} />\r\n        </div>\r\n      ))}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React, { useContext } from 'react'\r\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport InfoRow from './InfoRow'\r\n\r\nconst NftProgressSimple = () => {\r\n  const TranslateString = useI18n()\r\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Total Base and Rare NFTs Claimed')}:</Text>\r\n          <Text>\r\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\r\n          </Text>\r\n        </InfoRow>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftProgressSimple\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport NftProgress from './NftProgress'\r\nimport NftProgressSimple from './NftProgressSimple'\r\nimport StatusCard from './StatusCard'\r\n\r\nconst StyledNtfInfo = styled.div`\r\n  align-items: start;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`\r\n\r\nconst NftInfo = () => {\r\n  const { canBurnNft } = useContext(NftProviderContext)\r\n\r\n  return <NftProgressSimple />\r\n}\r\n\r\nexport default NftInfo\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Button } from '@pancakeswap-libs/uikit'\r\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport nfts from 'config/constants/newnfts'\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport NftInfo from './components/NftInfo'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray, getNewNftContract } from './utils/contracts'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst CustomButton = styled(Button)`\r\n  margin-right: 20px;\r\n`\r\n\r\nconst GoldenButton = styled(Button)`\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\r\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\r\n  border: 1px solid #a55d07;\r\n  color: rgb(120, 50, 5);\r\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  background-size: 100% 100%;\r\n  background-position: center;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    background-size: 150% 150%;\r\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n    border: 1px solid rgba(165, 93, 7, 0.6);\r\n    color: rgba(120, 50, 5, 0.8);\r\n  }\r\n  &:active {\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  }\r\n`\r\n\r\nconst NftMarketplace = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [NFTs, setNFTs] = useState(nfts)\r\n\r\n  const filterNFTs = useCallback(async (rarity = '') => {\r\n\r\n    const filteredNFTs = rarity !== '' ? nfts.filter((nft) => nft.rarity === rarity) : nfts;\r\n\r\n    const newNftContract = getNewNftContract()\r\n\r\n    const sellableNFTs = [];\r\n    filteredNFTs.forEach(async (nft) => {\r\n      const nftSecondaryMarket = await newNftContract.methods.nftSecondaryMarket(nft.nftId).call()\r\n      const { nftId, allowSell, sellMinPrice, totalArtistFee, totalGovernanceFee, lastSellIn, lastSellPrice, qtdSells, totalCollected, totalDevFee } = nftSecondaryMarket;\r\n      if(nftSecondaryMarket.allowSell === true) {\r\n        const sellableTradeIds = await newNftContract.methods.getListOpenTradesByNftId(nft.nftId).call()\r\n        const totalQuantity = Array.isArray(sellableTradeIds) && sellableTradeIds.length\r\n        console.log(\"sellableTradeIds\", sellableTradeIds, totalQuantity)\r\n        const tmpObj = {...nft, allowSell, sellMinPrice, totalArtistFee, totalGovernanceFee, lastSellIn, lastSellPrice, qtdSells, totalCollected, totalDevFee, sellableTradeIds, totalQuantity}\r\n        if(totalQuantity > 0) {\r\n          sellableNFTs.push(tmpObj);\r\n        }\r\n      }\r\n    })\r\n    console.log(\"test\", sellableNFTs);\r\n    setNFTs(sellableNFTs)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    filterNFTs()\r\n  }, [filterNFTs])\r\n\r\n  return (\r\n    <NftProvider>\r\n      <Page>\r\n        <StyledHero>\r\n          <Heading as=\"h1\" size=\"xl\" color=\"#9f0d0d\" mb=\"24px\">\r\n            NFT Marketplace\r\n          </Heading>\r\n          <Heading as=\"h2\" size=\"lg\" color=\"#9f0d0d\">\r\n            {TranslateString(999, 'Trade in for ALIFE, or keep for your collection!')}\r\n          </Heading>\r\n          <CustomButton onClick={() => filterNFTs('Base')} mt=\"24px\">\r\n            Base NFTs\r\n          </CustomButton>\r\n          <CustomButton variant=\"success\" onClick={() => filterNFTs('Rare')} mt=\"24px\">\r\n            Rare NFTs\r\n          </CustomButton>\r\n          <CustomButton variant=\"subtle\" onClick={() => filterNFTs('Epic')} mt=\"24px\">\r\n            Epic NFTs\r\n          </CustomButton>\r\n          <GoldenButton onClick={() => filterNFTs('Legendary')} mt=\"24px\">\r\n            Legendary NFTs\r\n          </GoldenButton>\r\n        </StyledHero>\r\n\r\n        <NftInfo />\r\n        <NftList data={NFTs} />\r\n      </Page>\r\n    </NftProvider>\r\n  )\r\n}\r\n\r\nexport default NftMarketplace\r\n"],"sourceRoot":""}