{"version":3,"sources":["hooks/useBlock.ts","views/VLADCollection/components/InfoRow.tsx","config/constants/nfts.ts","views/VLADCollection/utils/contracts.ts","views/VLADCollection/contexts/NftProvider.tsx","utils/erc20.ts","hooks/useTokenBalance.ts","views/VLADCollection/components/ClaimNftModal.tsx","hooks/useAllowance.ts","hooks/useApprove.ts","utils/formatBalance.ts","views/VLADCollection/components/BurnNftModal.tsx","views/VLADCollection/components/TransferNftModal.tsx","views/VLADCollection/components/NftCard/index.tsx","views/VLADCollection/components/NftList.tsx","views/VLADCollection/index.tsx"],"names":["useBlock","useContext","BlockContext","InfoRow","styled","div","NftFarm","getNftContract","contractOptions","nftAbi","nft","getContract","NFT","getNewNftContract","nftFarm","getFromWayArray","v","array","t","length","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","account","useWallet","console","log","currentBlock","useEffect","a","multicall","address","name","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","error","fetchContractData","nftContract","params","getMinted","methods","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","nftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","provider","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","balance","useTokenBalance","BigNumber","setBalance","ethereum","fastRefresh","useRefresh","res","fetchBalance","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useNFTFarmV2Contract","contraToken","useERC20","getLifeAddress","allowance","tokenContract","spenderAddress","dependency","setAllowance","fetch","useNftAllowance","onApprove","useCallback","approve","ethers","constants","MaxUint256","send","from","tx","useNftApprove","cakeInWallet","decimals","dividedBy","pow","getBalanceNumber","handleConfirm","mint","on","title","tokenAmount","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","useRabbitMintingFarm","burnNFT","AMOUNT_TO_CLAIM","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","theme","colors","text","TransferNftModal","values","setValues","NFTFarmV2Contract","utils","isAddress","getTradeIdByNftId","tradeId","transfer","htmlFor","id","type","placeholder","evt","target","inputValue","isWarning","NftCard","Button","attrs","Card","isOpen","nftCount","nftBurnCount","nftIndex","previewImage","originalImage","fileType","description","metadata","tokenSupply","indexOf","firstCharOfAccount","slice","lastCharOfAccount","fetchDetails","ChevronUpIcon","ChevronDownIcon","isDataFetched","handleSuccess","useModal","className","to","src","alt","pathname","authorTwitter","authorName","NftList","props","nfts","data","orderBy","map","VLADCollection","NFTs","setNFTs","filterNFTs","filteredNFTs","filter","newNftContract","sellableNFTs","forEach","nftSecondaryMarket","nftInfo","allowSell","sellMinPrice","totalArtistFee","totalGovernanceFee","lastSellIn","lastSellPrice","qtdSells","totalCollected","totalDevFee","getListOpenTradesByNftId","sellableTradeIds","totalQuantity","Array","isArray","tmpObj","role","data-bs-toggle","data-bs-target","aria-controls","aria-selected","aria-expanded","aria-labelledby"],"mappings":"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","file":"static/js/13.621d2773.chunk.js","sourcesContent":["import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import { Nft } from './types'\r\n\r\nexport const NftFarm = '0xaBa054F1437aEBEa43fB0804b734DdB3F39FB62F'\r\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Count Pepes Chocula',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-dark-chocolate.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 0,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Vlad Pepes Drakul',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\r\n    previewImage: 'preview-base-main-nopaint.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 1,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Pepes in Stone',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-marble.jpg',\r\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 2,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'The path to Vladhalla',\r\n    metadata: '',\r\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\r\n    previewImage: 'preview-path-to-vladhalla.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 3,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Painted Pepe',\r\n    metadata: '',\r\n    description:\r\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\r\n    previewImage: 'preview-painted-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 4,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 5,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/newnfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport { NftFarm } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype BunnyMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  ownerById: number[]\r\n  amounts: number[]\r\n  maxMintByNft: number[]\r\n  prices: number[]\r\n  myMints: number[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: BunnyMap\r\n\r\n  allowMultipleClaims: boolean\r\n  rarity: string\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n  tokenPerBurn: number\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    ownerById: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    rarity: '',\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n    tokenPerBurn: 0,\r\n\r\n    amounts: [],\r\n    maxMintByNft: [],\r\n    prices: [],\r\n    myMints: [],\r\n  })\r\n  const { account } = useWallet()\r\n  console.log(\"account\", account);\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const [\r\n          startBlockNumberArr,\r\n          endBlockNumberArr,\r\n          countBurntArr,\r\n          totalSupplyDistributedArr,\r\n          currentDistributedSupplyArr,\r\n\r\n          allowMultipleClaimsArr,\r\n          rarityArr,\r\n          priceMultiplierArr,\r\n          maxMintPerNftArr,\r\n          tokenPerBurnArr,\r\n        ] = await multicall(nftFarm, [\r\n          { address: NftFarm, name: 'startBlockNumber' },\r\n          { address: NftFarm, name: 'endBlockNumber' },\r\n          { address: NftFarm, name: 'countBurnt' },\r\n          { address: NftFarm, name: 'totalSupplyDistributed' },\r\n          { address: NftFarm, name: 'currentDistributedSupply' },\r\n          { address: NftFarm, name: 'allowMultipleClaims' },\r\n          { address: NftFarm, name: 'rarity' },\r\n          { address: NftFarm, name: 'priceMultiplier' },\r\n          { address: NftFarm, name: 'maxMintPerNft' },\r\n          { address: NftFarm, name: 'tokenPerBurn' },\r\n        ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        const [countBurnt]: [BigNumber] = countBurntArr\r\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          countBurnt: countBurnt.toNumber(),\r\n          startBlockNumber: startBlockNumber.toNumber(),\r\n          endBlockNumber: endBlockNumber.toNumber(),\r\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          rarity: rarityArr[0].toString(),\r\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\r\n\r\n        // console.log('getMinted', getMinted)\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const ownerById = getMinted[0][2]\r\n        const maxMintByNft = getToInt(getMinted[0][3])\r\n        const prices = getFromWayArray(getMinted[0][4])\r\n        const myMints = getToInt(getMinted[0][5])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('ownerById', ownerById)\r\n        // console.log('maxMintByNft', maxMintByNft)\r\n        // console.log('prices', prices)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        let nftMap: BunnyMap = {}\r\n\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndBunnyId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\r\n\r\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          ownerById,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          maxMintByNft,\r\n          prices,\r\n          myMints,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    const fetchNonLoggedInContractData = async () => {\r\n      try {\r\n        const getMinted = await multicall(nftFarm, [\r\n          { address: NftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\r\n        ])\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          amounts,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    } else {\r\n      fetchNonLoggedInContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract(erc20 as unknown as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/newnfts'\r\nimport { getLifeAddress } from 'utils/addressHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useERC20, useNFTFarmV2Contract } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\nimport { useNftAllowance } from '../../../hooks/useAllowance'\r\nimport { useNftApprove } from '../../../hooks/useApprove'\r\n\r\ninterface ClaimNftModalProps {\r\n  nft: Nft\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const nftMintingContract = useNFTFarmV2Contract(NftFarm)\r\n  const contraToken = useERC20(getLifeAddress())\r\n  const allowance = useNftAllowance(contraToken, NftFarm, pendingTx)\r\n  const onApprove = useNftApprove(contraToken, NftFarm)\r\n  const cakeBalance = useTokenBalance(getLifeAddress())\r\n  const cakeInWallet = getBalanceNumber(cakeBalance)\r\n\r\n  // console.log('getLifeAddress', getLifeAddress(), NftFarm, allowance)\r\n  // console.log('allowance', allowance)\r\n\r\n  const handleConfirm = async () => {\r\n    if (allowance === null) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      await nftMintingContract.methods\r\n        .mint(nft.nftId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to claim NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to mint NFT:', err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (cakeInWallet === 0) {\r\n      setError(`You must have ALIFE balance to claim NFT`)\r\n    }\r\n  }, [cakeInWallet, setError])\r\n\r\n  return (\r\n    <Modal title={`Claim NFT for ${nft.tokenAmount} ALIFE`} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button\r\n          fullWidth\r\n          disabled={!account || pendingTx || isLoading || allowance > 0}\r\n          onClick={async () => {\r\n            try {\r\n              setPendingTx(true)\r\n              await onApprove()\r\n              setPendingTx(false)\r\n            } catch (e) {\r\n              setPendingTx(false)\r\n              console.error(e)\r\n            }\r\n          }}\r\n        >\r\n          Approve\r\n        </Button>\r\n\r\n        <Button\r\n          fullWidth\r\n          onClick={handleConfirm}\r\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\r\n        >\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useCake, useLottery } from './useContract'\r\nimport { getAllowance } from '../utils/erc20'\r\n\r\n// Retrieve lottery allowance\r\nexport const useLotteryAllowance = () => {\r\n  const [allowance, setAllowance] = useState(new BigNumber(0))\r\n  const { account }: { account: string } = useWallet()\r\n  const lotteryContract = useLottery()\r\n  const cakeContract = useCake()\r\n\r\n  useEffect(() => {\r\n    const fetchAllowance = async () => {\r\n      const res = await getAllowance(cakeContract, lotteryContract, account)\r\n      setAllowance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && cakeContract && cakeContract) {\r\n      fetchAllowance()\r\n    }\r\n    const refreshInterval = setInterval(fetchAllowance, 10000)\r\n    return () => clearInterval(refreshInterval)\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve IFO allowance\r\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\r\n  const { account }: { account: string } = useWallet()\r\n  const [allowance, setAllowance] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        setAllowance(null)\r\n      }\r\n    }\r\n    fetch()\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve NFT allowance\r\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\r\n  const { account }: { account: string } = useWallet()\r\n  const [allowance, setAllowance] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        console.log(e.toString())\r\n        setAllowance(null)\r\n      }\r\n    }\r\n    fetch()\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n\r\n// Approve an NFT\r\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import BigNumber from 'bignumber.js'\r\n\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\r\n  return displayBalance.toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\r\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/newnfts'\r\nimport { useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface BurnNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [accepted, setAccepted] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const [tokenId] = tokenIds\r\n\r\n      await nftMintingContract.methods\r\n        .burnNFT(tokenId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to burn NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to burn NFT:', err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>${AMOUNT_TO_CLAIM} ALIFE</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <ModalContent>\r\n        <Text color=\"failure\">\r\n          {TranslateString(999, 'When you trade in this NFT to receive ALIFE, you will lose access to it forever!')}\r\n        </Text>\r\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\r\n      </ModalContent>\r\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\r\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\r\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\r\n          {TranslateString(999, 'I understand')}\r\n        </Text>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BurnNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { NFT, NftFarm } from 'config/constants/newnfts'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useNFTFarmV2Contract } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n// tokenIds is retrieved dynamically from contracts.\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [values, setValues] = useState({\r\n    address: '',\r\n    tokenId: tokenIds[0],\r\n  })\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  const NFTFarmV2Contract = useNFTFarmV2Contract(NftFarm)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(values.address)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        const tradeId = await NFTFarmV2Contract.methods.getTradeIdByNftId(account, nft.nftId).call()\r\n        await NFTFarmV2Contract.methods\r\n          .transfer(tradeId, values.address)\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue, name } = evt.target\r\n    setValues({ ...values, [name]: inputValue })\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={TranslateString(999, 'Paste address')}\r\n          value={values.address}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n        {/* <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Token ID')}:</Label>\r\n        <Input\r\n          id=\"tokenId\"\r\n          name=\"tokenId\"\r\n          type=\"number\"\r\n          placeholder={TranslateString(999, 'Enter tokenId')}\r\n          value={values.tokenId}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        /> */}\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          fullWidth\r\n          onClick={handleConfirm}\r\n          disabled={!account || isLoading || !values.address || !values.tokenId}\r\n        >\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState, useContext, useCallback } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n  LogoIcon,\r\n} from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { List } from 'antd'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { SellableNft } from 'config/constants/types'\r\nimport { AMOUNT_TO_CLAIM } from 'config/constants/newnfts'\r\nimport Page from 'components/layout/Page'\r\nimport InfoRow from '../InfoRow'\r\nimport Image from '../Image'\r\nimport { NftProviderContext } from '../../contexts/NftProvider'\r\nimport { getNftContract } from '../../utils/contracts'\r\nimport ClaimNftModal from '../ClaimNftModal'\r\nimport BurnNftModal from '../BurnNftModal'\r\nimport TransferNftModal from '../TransferNftModal'\r\n\r\ninterface NftCardProps {\r\n  nft: SellableNft\r\n}\r\n\r\nconst StyledNotFound = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: calc(100vh - 64px);\r\n  justify-content: center;\r\n`\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 28px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 0 24px 24px;\r\n`\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst SmallCard = styled(Card)`\r\n  margin: 0 auto;\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n  console.log(\"nft..............\", nft);\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: true,\r\n    nftCount: 0,\r\n    nftBurnCount: 0,\r\n  })\r\n  const TranslateString = useI18n()\r\n  const {\r\n    isInitialized,\r\n    hasClaimed,\r\n    ownerById,\r\n    canBurnNft,\r\n    totalSupplyDistributed,\r\n    currentDistributedSupply,\r\n    getTokenIds,\r\n    reInitialize,\r\n    allowMultipleClaims,\r\n    priceMultiplier,\r\n    maxMintPerNft,\r\n    amounts,\r\n    maxMintByNft,\r\n    prices,\r\n    myMints,\r\n  } = useContext(NftProviderContext)\r\n  const { account } = useWallet()\r\n\r\n  console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, priceMultiplier, maxMintPerNft)\r\n  console.log('LIMITS BY NFT:', amounts, maxMintByNft, prices)\r\n\r\n  // maxMintPerNft limit max amount that a nft can be minted\r\n  // maxMintByNft array containing individual amount of mint per nft index\r\n  // prices array containing individual prices of a mint per nft index\r\n  // tokenPerBurn global price\r\n\r\n  console.log(ownerById)\r\n\r\n  const { nftId, name, previewImage, originalImage, fileType, description, metadata, tokenAmount, tokenSupply } = nft\r\n\r\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\r\n\r\n  const MINTS = myMints[nftIndex] || 0\r\n\r\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\r\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\r\n\r\n  const hasClaimedArr: any = hasClaimed[0]\r\n  const ownerByIdArr: any = ownerById[0]\r\n\r\n  const firstCharOfAccount = account != null && account.slice(0, 4)\r\n  const lastCharOfAccount = account != null && account.slice(-4)\r\n\r\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\r\n\r\n  const loggedIn = account !== null\r\n\r\n  // console.log('?hasClaimed', hasClaimed)\r\n  // console.log('?ownerById', ownerById)\r\n\r\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\r\n\r\n  // Here, tokenIds can be undefined as balanceOf is less than 1.\r\n  const tokenIds = getTokenIds(nftId)\r\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\r\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\r\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const fetchDetails = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      const { methods } = getNftContract()\r\n      const nftCount = await methods.nftCount(nftId).call()\r\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        nftCount: parseInt(nftCount, 10),\r\n        nftBurnCount: parseInt(nftBurnCount, 10),\r\n      }))\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }, [nftId])\r\n\r\n  const handleClick = async () => {\r\n    if (state.isOpen) {\r\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n    } else {\r\n      try {\r\n        await fetchDetails()\r\n      } catch (error) {\r\n        console.error(error)\r\n      } finally {\r\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSuccess = () => {\r\n    fetchDetails()\r\n    reInitialize()\r\n  }\r\n\r\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\r\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\r\n  const [onPresentTransferModal] = useModal(\r\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n  )\r\n\r\n  return (\r\n        <div className=\"vcblock\">\r\n          <Link to={`/vlad-detail/${nft.nftId}`}>\r\n            <img src={`/images/nfts/${nft.previewImage}`} alt={nft.name} className=\"img-fluid\" />\r\n          </Link>\r\n          <div className=\"vcblockhead\">\r\n            <Link to={`/vlad-detail/${nft.nftId}`}>\r\n              <h6 className=\"inner-title\">{nft.name}</h6>\r\n            </Link>\r\n            <p>By <Link to={{ pathname: nft.authorTwitter }} >{nft.authorName}</Link></p>\r\n            {/* <div className=\"vcblock-smcontent\">\r\n              <p>On Sell</p>\r\n              <p>Highest Bid <span className=\"b\">100 VLAD </span><span className=\"aucprice\">$56.49</span></p>\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport NftCard from './NftCard'\r\n\r\nconst NftList = (props) => {\r\n  const { data: nfts } = props\r\n  return (\r\n    <div className=\"row\">\r\n      {orderBy(nfts, 'sortOrder').map((nft) => (\r\n        <div className=\"col-sm-12 col-md-4\" key={nft.nftId}>\r\n          <NftCard nft={nft} />\r\n        </div>\r\n      ))}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport nfts from 'config/constants/newnfts'\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport { getNewNftContract } from './utils/contracts'\r\n\r\nconst VLADCollection = () => {\r\n\r\n  const [NFTs, setNFTs] = useState(nfts)\r\n\r\n  const filterNFTs = useCallback(async (rarity = '') => {\r\n\r\n    const filteredNFTs = rarity !== '' ? nfts.filter((nft) => nft.rarity === rarity) : nfts;\r\n\r\n    const newNftContract = getNewNftContract()\r\n\r\n    const sellableNFTs = [];\r\n    filteredNFTs.forEach(async (nft) => {\r\n      const nftSecondaryMarket = await newNftContract.methods.nftSecondaryMarket(nft.nftId).call()\r\n      const nftInfo = await newNftContract.methods.nftInfo(nft.nftId).call();\r\n      const { authorName, authorTwitter } = nftInfo;\r\n      const { nftId, allowSell, sellMinPrice, totalArtistFee, totalGovernanceFee, lastSellIn, lastSellPrice, qtdSells, totalCollected, totalDevFee } = nftSecondaryMarket;\r\n      if (nftSecondaryMarket.allowSell === true) {\r\n        const sellableTradeIds = await newNftContract.methods.getListOpenTradesByNftId(nft.nftId).call()\r\n        const totalQuantity = Array.isArray(sellableTradeIds) && sellableTradeIds.length\r\n        const tmpObj = {\r\n          ...nft,\r\n          allowSell,\r\n          sellMinPrice,\r\n          totalArtistFee,\r\n          totalGovernanceFee,\r\n          lastSellIn,\r\n          lastSellPrice,\r\n          qtdSells,\r\n          totalCollected,\r\n          totalDevFee,\r\n          sellableTradeIds,\r\n          totalQuantity,\r\n          authorName,\r\n          authorTwitter\r\n        }\r\n        if (totalQuantity > 0) {\r\n          sellableNFTs.push(tmpObj);\r\n        }\r\n      }\r\n    })\r\n    setNFTs(sellableNFTs)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    filterNFTs()\r\n  }, [filterNFTs])\r\n\r\n  return (\r\n    <NftProvider>\r\n      <section className=\"vcollectionsec\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12 mb-5 vchead\">\r\n              <h3>VLAD NFT Facts</h3>\r\n              <div className=\"vctab-wrap\">\r\n                <ul className=\"vctab nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink active\" id=\"pills-home-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-home\" type=\"button\" role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">ALL</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink\" id=\"pills-profile-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-profile\" type=\"button\" role=\"tab\" aria-controls=\"pills-profile\" >FOR SALE</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink\" id=\"pills-contact-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-contact\" type=\"button\" role=\"tab\" aria-controls=\"pills-contact\" >BID</button>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12\">\r\n              <div className=\"pricefilterwrap\">\r\n                <ul className=\"nav nav-pills pricefilterpills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link pricelink active\" id=\"pills-home-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#price-lowest\" type=\"button\" role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">Price - Lowest</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link pricelink\" id=\"pills-profile-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#price-highest\" type=\"button\" role=\"tab\" aria-controls=\"pills-profile\" aria-selected=\"false\">Price - Highest</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link pricelink\" id=\"pills-contact-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#rarity-rare\" type=\"button\" role=\"tab\" aria-controls=\"pills-contact\" aria-selected=\"false\">Rarity - Rare</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link pricelink\" id=\"pills-contact-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#rarity-common\" type=\"button\" role=\"tab\" aria-controls=\"pills-contact\" aria-selected=\"false\">Rarity - Common</button>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <div className=\"vc-filter vc-explore\">\r\n                <ul className=\"nav vc-nav nav-pills\">\r\n                  <li className=\"nav-item vcdropdown pricedropdown dropdown\">\r\n                    <Link className=\"nav-link vcdropdown-toggle dropdown-toggle dropbtn\" data-bs-toggle=\"dropdown\" to=\"/\" role=\"button\" aria-expanded=\"false\">Filter <img src=\"assets/images/settings-filter.svg\" alt=\"filter-icon\" className=\"img-fluid\" /></Link>\r\n                    <div className=\"dropdown-content\">\r\n                      <p>Format</p>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            GIF\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"count\">23</div>\r\n                      </Link>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            JPG\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"count\">1009</div>\r\n                      </Link>\r\n                      <hr className=\"seperator\" />\r\n                      <p>Rarity</p>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Base\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"count\">6,666</div>\r\n                      </Link>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Rare\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"count\">1,998</div>\r\n                      </Link>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Epic\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"count\">198</div>\r\n                      </Link>\r\n                      <Link to=\"/\">\r\n                        <div className=\"form-check checkblock\">\r\n                          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\" />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">Legendary</label>\r\n                        </div>\r\n                        <div className=\"count\">18</div>\r\n                      </Link>\r\n                    </div>\r\n                  </li>\r\n                  {/* <li class=\"nav-item vcdropdown pricedropdown dropdown\">\r\n                    <a class=\"nav-link vcdropdown-toggle dropdown-toggle dropbtn\" data-bs-toggle=\"dropdown\" href=\"#\" role=\"button\" aria-expanded=\"false\">Rarity <img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"down-arrow\"></a>\r\n                    <div class=\"dropdown-content\">\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"down-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"down-arrow\"></div>\r\n                        </a>\r\n                        <P>Rarity</P>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">Legendary</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                    </div>\r\n                  </li> */}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* Start of Price Filter Tab */}\r\n          <div className=\"row\">\r\n            <div className=\"tab-content pricetabcontent\" id=\"pills-tabContent\">\r\n              <div className=\"tab-pane fade\" id=\"price-highest\" role=\"tabpanel\" aria-labelledby=\"pills-profile-tab\">Price - Highest</div>\r\n              <div className=\"tab-pane fade\" id=\"rarity-rare\" role=\"tabpanel\" aria-labelledby=\"pills-contact-tab\">Rarity - Rare</div>\r\n              <div className=\"tab-pane fade\" id=\"rarity-common\" role=\"tabpanel\" aria-labelledby=\"pills-contact-tab\">Rarity - Common</div>\r\n            </div>\r\n          </div>\r\n          {/* End of Price Filter Tab */}\r\n        </div>\r\n        {/* Slider */}\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"ctab-content tab-content\" id=\"pills-tabContent\">\r\n              <div className=\"tab-pane fade show active ctabpane\" id=\"pills-home\" role=\"tabpanel\" aria-labelledby=\"pills-home-tab\">\r\n                <NftList data={NFTs} />\r\n              </div>\r\n              {/* END OF ALL TAB */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </NftProvider>\r\n  );\r\n\r\n};\r\n\r\nexport default VLADCollection;\r\n"],"sourceRoot":""}