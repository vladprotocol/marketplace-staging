{"version":3,"sources":["views/MyNFT/components/NftCard/index.tsx","views/MyNFT/components/NftList.tsx","views/MyNFT/utils/contracts.ts","views/MyNFT/index.tsx"],"names":["NftCard","nft","currentTab","useState","isLoading","isOpen","nftCount","nftBurnCount","state","setState","console","log","useWallet","account","handleClick","prevState","className","href","tradeId","src","previewImage","alt","name","authorName","onClick","onKeyDown","role","description","NftList","props","nfts","data","orderBy","map","nftId","getNewNftContract","contractOptions","nftAbi","nftFarm","getContract","NftFarm","MyNFT","accountEllipsis","substring","length","NFTs","setNFTs","setCurrentTab","setIsLoading","filterNFTs","useCallback","a","newNftContract","nftData","forEach","tradeIds","methods","getTradesByNftIdAndUser","call","isArray","push","getNftData","parseInt","setTimeout","error","filterListedNFTs","listOpenTradeIds","commonTradeIds","getListOpenTradesByNftId","filter","value","includes","handleTab","tab","nftDetailLink","nftPreviewImage","nftName","useEffect","id","type","PageLoader"],"mappings":"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","file":"static/js/18.18ec1e4e.chunk.js","sourcesContent":["import React, { useState, useContext, useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { SellableNft } from 'config/constants/types'\r\n\r\n\r\ninterface NftCardProps {\r\n  nft: SellableNft,\r\n  currentTab: string\r\n}\r\n\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft, currentTab }) => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: false,\r\n    nftCount: 0,\r\n    nftBurnCount: 0,\r\n  })\r\n\r\n  console.log(\"state...\", state.isOpen);\r\n\r\n  const { account } = useWallet()\r\n\r\n\r\n\r\n  const handleClick = () => {\r\n    console.log(\"state\", state.isOpen);\r\n    if (state.isOpen) {\r\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n    } else {\r\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"cblock\">\r\n      <a href={`/vlad-detail/${nft.tradeId}`}>\r\n        <img src={`/images/nfts/${nft.previewImage}`} alt={nft.name} className=\"img-fluid\" />\r\n      </a>\r\n      <div className=\"cblock-content\">\r\n        <div className=\"cblock-headwrap\">\r\n          <a href={`/vlad-detail/${nft.tradeId}`}>\r\n            <div className=\"cblock-lefthead\">\r\n              <h6 className=\"inner-title\">{nft.name}</h6>\r\n              <p>{nft.authorName}</p>\r\n            </div>\r\n          </a>\r\n          {currentTab === 'owned' &&\r\n            (\r\n              <div className=\"owdetails-head\">\r\n                <i>\r\n                  <img src=\"/assets/images/arrow-downsm.svg\" className={`arrow-icon ${state.isOpen ? 'active' : ''}`} alt=\"arrow\" />\r\n                </i>\r\n                <span className=\"details-text\" onClick={handleClick} onKeyDown={handleClick} role=\"presentation\"> Details </span>\r\n              </div>\r\n            )\r\n          }\r\n\r\n          {state.isOpen && (\r\n            <div className=\"details-answer-new\">\r\n              {nft.description}\r\n            </div>\r\n          )}\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport NftCard from './NftCard'\r\n\r\nconst NftList = (props) => {\r\n  const { data: nfts, currentTab } = props\r\n  return (\r\n    <div className=\"row\">\r\n      {orderBy(nfts, 'sortOrder').map((nft) => (\r\n        <div className=\"col-sm-12 col-md-4\" key={nft.nftId}>\r\n          <NftCard nft={nft} currentTab={currentTab} />\r\n        </div>\r\n      ))}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/newnfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { isArray } from 'lodash'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Link } from 'react-router-dom';\r\nimport nfts from 'config/constants/newnfts'\r\nimport PageLoader from 'components/PageLoader';\r\nimport NftList from './components/NftList'\r\nimport { getNewNftContract } from './utils/contracts'\r\n\r\n\r\nconst MyNFT = () => {\r\n\r\n  const { account } = useWallet()\r\n\r\n  const accountEllipsis = account ? `${account.substring(0, 4)}...${account.substring(account.length - 4)}` : null\r\n\r\n  const [NFTs, setNFTs] = useState([])\r\n  const [currentTab, setCurrentTab] = useState('owned');\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const filterNFTs = useCallback(async (rarity = '') => {\r\n    try {\r\n\r\n      setIsLoading(true);\r\n\r\n      const newNftContract = getNewNftContract()\r\n\r\n      const nftData = []\r\n\r\n\r\n      nfts.forEach(async (nft) => {\r\n        let tradeIds = [];\r\n        if(account) {\r\n          tradeIds = await newNftContract.methods.getTradesByNftIdAndUser(account, nft.nftId).call()\r\n        }\r\n        if (isArray(tradeIds) && tradeIds.length > 0) {\r\n          tradeIds.forEach((tradeId) => {\r\n            nftData.push(getNftData(parseInt(tradeId, 10), nft.nftId))\r\n          })\r\n        }\r\n      })\r\n      setNFTs(nftData);\r\n\r\n      setTimeout(()=>{\r\n        setIsLoading(false);\r\n      }, 1000);\r\n      \r\n    } catch (error) {\r\n      console.log(\"error\");\r\n      console.error(error);\r\n    }\r\n  }, [account])\r\n\r\n  const filterListedNFTs = useCallback(async () => {\r\n    try {\r\n\r\n      setIsLoading(true);\r\n\r\n      const newNftContract = getNewNftContract()\r\n\r\n      const nftData = []\r\n    \r\n      nfts.forEach(async (nft) => {\r\n        let tradeIds = [];\r\n        let listOpenTradeIds = [];\r\n        let commonTradeIds = []\r\n        if(account) {\r\n          tradeIds = await newNftContract.methods.getTradesByNftIdAndUser(account, nft.nftId).call()\r\n          listOpenTradeIds = await newNftContract.methods.getListOpenTradesByNftId(nft.nftId).call()\r\n          commonTradeIds = tradeIds.filter(value => listOpenTradeIds.includes(value));\r\n        }\r\n        if (isArray(commonTradeIds) && commonTradeIds.length > 0) {\r\n          commonTradeIds.forEach((tradeId) => {\r\n            nftData.push(getNftData(parseInt(tradeId, 10), nft.nftId))\r\n          })\r\n        }\r\n      })\r\n      setNFTs(nftData);\r\n\r\n      setTimeout(()=>{\r\n        setIsLoading(false);\r\n      }, 1000);\r\n\r\n    } catch (error) {\r\n      console.log(\"error\");\r\n      console.error(error);\r\n    }\r\n  }, [account])\r\n\r\n  const handleTab = (tab) => {\r\n    setCurrentTab(tab);\r\n  }\r\n\r\n\r\n  const getNftData = (tradeId: number, nft: number) => {\r\n    try {\r\n      const nftDetailLink = `/new-detail/${nft}`\r\n      const nftPreviewImage = nfts.filter((data) => nft === data.nftId).map((data) => data.previewImage)\r\n      const nftName = nfts.filter((data) => nft === data.nftId).map((data) => data.name)\r\n      const description = nfts.filter((data) => nft === data.nftId).map((data) => data.description)\r\n\r\n      return {\r\n        tradeId,\r\n        name: nftName[0] || '',\r\n        description: description[0] || '',\r\n        previewImage: nftPreviewImage[0] || '',\r\n        nftDetailLink,\r\n        nftId: nft,\r\n      }\r\n    } catch (error) {\r\n      return null\r\n    }\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if(currentTab === 'owned') {\r\n      filterNFTs()\r\n    } else if(currentTab === 'listed') {\r\n      setNFTs([]);\r\n      filterListedNFTs()\r\n    }\r\n  }, [filterNFTs, filterListedNFTs, currentTab])\r\n\r\n    return (\r\n      <section className=\"vcollectionsec\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12 mb-5\">\r\n              <div className=\"nfthead\">\r\n                <div>\r\n                  <img src=\"assets/images/Ellipse.png\" alt=\"eclipse\" className=\"img-fluid\" />\r\n                </div>\r\n                <div className=\"nftname\">\r\n                  <h5 className=\"inner-title\">{accountEllipsis}</h5>\r\n                  <span>{NFTs.length} NFT(s) in Account</span>\r\n                </div>\r\n              </div>\r\n              \r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12\">\r\n              {/* Start of Small Tab */}\r\n              <ul className=\"bigtab nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n                <li className=\"nav-item\" role=\"presentation\">\r\n                  <button\r\n                    className={`nav-link bigtablink ${currentTab === 'owned' ? 'active' : ''}`}\r\n                    id=\"pills-home-tab\"\r\n                    data-bs-toggle=\"pill\"\r\n                    data-bs-target=\"#woed-home\"\r\n                    type=\"button\"\r\n                    role=\"tab\"\r\n                    aria-controls=\"pills-home\"\r\n                    aria-selected=\"true\"\r\n                    onClick={() => handleTab('owned')}\r\n                  >\r\n                    OWNED\r\n                  </button>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <button\r\n                    className={`nav-link bigtablink ${currentTab === 'listed' ? 'active' : ''}`}\r\n                    type=\"button\"\r\n                    onClick={() => handleTab('listed')}\r\n                  >\r\n                    LISTED\r\n                  </button>\r\n                </li>\r\n                {/* <li className=\"nav-item\" role=\"presentation\">\r\n                  <button\r\n                    className=\"nav-link bigtablink\"\r\n                    id=\"pills-contact-tab\"\r\n                    data-bs-toggle=\"pill\"\r\n                    data-bs-target=\"#offers-block\"\r\n                    type=\"button\"\r\n                    role=\"tab\"\r\n                    aria-controls=\"pills-contact\"\r\n                    aria-selected=\"false\"\r\n                  >\r\n                    OFFERS\r\n                  </button>\r\n                </li>\r\n                <li className=\"nav-item\" role=\"presentation\">\r\n                  <button\r\n                    className=\"nav-link bigtablink\"\r\n                    id=\"pills-profile-tab\"\r\n                    data-bs-toggle=\"pill\"\r\n                    data-bs-target=\"#history-tab\"\r\n                    type=\"button\"\r\n                    role=\"tab\"\r\n                    aria-controls=\"pills-profile\"\r\n                    aria-selected=\"false\"\r\n                  >\r\n                    HISTORY\r\n                  </button>\r\n                </li> */}\r\n              </ul>\r\n              <div className=\"big-tabcontent tab-content\" id=\"pills-tabContent\">\r\n                {/* Start of OWED BLOCK CONTENT */}\r\n                <div\r\n                  className=\"tab-pane fade show active\"\r\n                  id=\"woed-home\"\r\n                  role=\"tabpanel\"\r\n                  aria-labelledby=\"pills-home-tab\"\r\n                >\r\n                {isLoading ? <PageLoader /> : <NftList data={NFTs} currentTab={currentTab} />}\r\n                \r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n};\r\n\r\nexport default MyNFT;"],"sourceRoot":""}