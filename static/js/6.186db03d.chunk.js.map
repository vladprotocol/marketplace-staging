{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","config/constants/newnfts.ts","hooks/useWeb3.ts","config/constants/index.ts","hooks/useContract.ts","views/NftMarketplace/components/InfoRow.tsx","views/NftMarketplace/components/Image.tsx","views/NftMarketplace/utils/contracts.ts","views/NftMarketplace/contexts/NftProvider.tsx","views/NftMarketplace/components/NftCard/index.tsx","views/NftMarketplace/components/NftGrid.tsx","views/NftMarketplace/components/NftList.tsx","views/NftMarketplace/components/NftProgressSimple.tsx","views/NftMarketplace/components/NftInfo.tsx","views/NftMarketplace/index.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","NftFarm","NFT","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","rarity","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","nftAbi","nft","getContract","getNewNftContract","nftFarm","getFromWayArray","v","array","t","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","isApproved","state","setState","account","currentBlock","useBlock","a","prevState","error","console","fetchContractData","multicall","nftFarmV2","params","getMinted","methods","call","isApprovedForAll","getTokenIdAndNftId","index","tokenOfOwnerByIndex","tokenId","getNftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","canBurnNft","Provider","value","getTokenIds","reInitialize","Header","NftCard","Button","attrs","variant","fullWidth","Text","minTradeId","isLoading","isOpen","nftCount","nftBurnCount","setMinted","setMaxMint","BigNumber","setPrice","TranslateString","useHistory","setRequestedApproval","setIsLoading","setError","sellMinPrice","sellableTradeIds","totalQuantity","_","size","Math","min","slice","nftIndex","indexOf","MINTS","newFarmContract","nftInfoState","mintedValue","minted","maxMintValue","maxMint","priceValue","price","pow","getNftInfoState","walletOwnsNft","fetchDetails","useCallback","isDataFetched","handleApprove","setApprovalForAll","send","from","on","log","useNFTFarmV2Contract","handleBuy","buy","isActive","outline","mt","onClick","NftGrid","BaseLayout","mediaQueries","sm","NftList","props","nfts","orderBy","NftProgressSimple","NftInfo","StyledHero","textSubtle","CustomButton","GoldenButton","NftMarketplace","NFTs","setNFTs","filterNFTs","filteredNFTs","newNftContract","sellableNFTs","forEach","nftSecondaryMarket","allowSell","totalArtistFee","totalGovernanceFee","lastSellIn","lastSellPrice","qtdSells","totalCollected","totalDevFee","getListOpenTradesByNftId","Array","isArray","tmpObj","Page","as","color","mb"],"mappings":"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","file":"static/js/6.186db03d.chunk.js","sourcesContent":["import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\nconst variableRegex = /%(.*?)%/\r\n\r\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\r\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\r\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\r\n  const fallbackValueAtIndex = fallback.split(' ')[0]\r\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\r\n}\r\n\r\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\r\n  const foundTranslation = translations.find((translation) => {\r\n    return translation.data.stringId === translationId\r\n  })\r\n  if (foundTranslation) {\r\n    const translatedString = foundTranslation.data.text\r\n    const includesVariable = translatedString.includes('%')\r\n    if (includesVariable) {\r\n      return replaceDynamicString(translatedString, fallback)\r\n    }\r\n    return translatedString\r\n  }\r\n  return fallback\r\n}\r\n\r\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\r\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\r\n// @see https://reactjs.org/docs/hooks-rules.html\r\nexport const TranslateString = (translationId: number, fallback: string) => {\r\n  const { translations } = useContext(TranslationsContext)\r\n  if (translations[0] === 'error') {\r\n    return fallback\r\n  }\r\n  if (translations.length > 0) {\r\n    return getTranslation(translations, translationId, fallback)\r\n  }\r\n  return fallback\r\n}\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\nimport { getTranslation } from '../utils/translateTextHelpers'\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string) => {\r\n    if (translations[0] === 'error') {\r\n      return fallback\r\n    }\r\n    if (translations.length > 0) {\r\n      return getTranslation(translations, translationId, fallback)\r\n    }\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import { Nft } from './types'\r\n\r\nexport const NftFarm = '0xe2Ca0a1A291f1b40406ea39cc095d90cfc4d393D'\r\nexport const NFT = '0xa81ab2d03b9e3a62bdbb837d417a5e221f754e14'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Count Pepes Chocula',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-dark-chocolate.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 100,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Vlad Pepes Drakul',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\r\n    previewImage: 'preview-base-main-nopaint.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 101,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Pepes in Stone',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-marble.jpg',\r\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 102,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'The path to Vladhalla',\r\n    metadata: '',\r\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\r\n    previewImage: 'preview-path-to-vladhalla.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 103,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Rare',\r\n  },\r\n  {\r\n    name: 'Painted Pepe',\r\n    metadata: '',\r\n    description:\r\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\r\n    previewImage: 'preview-painted-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 104,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Rare',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 105,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Rare',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 106,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Epic',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 107,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Epic',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 108,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Epic',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 109,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Legendary',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 110,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Legendary',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 111,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Legendary',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the ethereum provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\r\n  const refEth = useRef(ethereum)\r\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\r\n\r\n  useEffect(() => {\r\n    if (ethereum !== refEth.current) {\r\n      setweb3(new Web3(ethereum || httpProvider))\r\n      refEth.current = ethereum\r\n    }\r\n  }, [ethereum])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import farmsConfig from './farms'\r\n\r\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\r\n\r\nexport { farmsConfig, communityFarms }\r\nexport { default as poolsConfig } from './pools'\r\nexport { default as ifosConfig } from './ifo'\r\n","import { useEffect, useState } from 'react'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\r\nimport { poolsConfig } from 'config/constants'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport ifo from 'config/abi/ifo.json'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport lottery from 'config/abi/lottery.json'\r\nimport lotteryTicket from 'config/abi/lotteryNft.json'\r\nimport masterChef from 'config/abi/masterchef.json'\r\nimport sousChef from 'config/abi/sousChef.json'\r\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\r\n\r\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = useWeb3()\r\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\r\n\r\n  useEffect(() => {\r\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\r\n  }, [abi, address, contractOptions, web3])\r\n\r\n  return contract\r\n}\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoContract = (address: string) => {\r\n  const ifoAbi = ifo as unknown as AbiItem\r\n  return useContract(ifoAbi, address)\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const erc20Abi = erc20 as unknown as AbiItem\r\n  return useContract(erc20Abi, address)\r\n}\r\n\r\nexport const useCake = () => {\r\n  return useERC20(getCakeAddress())\r\n}\r\n\r\nexport const useRabbitMintingFarm = (address: string) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return useContract(nftMintingFarmAbi, address)\r\n}\r\n\r\nexport const usePancakeRabbits = (address: string) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return useContract(nftAbi, address)\r\n}\r\n\r\nexport const useNewNFTFarmContract = (address: string) => {\r\n  const nftFarmAbi = nftFarm as unknown as AbiItem\r\n  return useContract(nftFarmAbi, address)\r\n}\r\n\r\nexport const useNFTFarmV2Contract = (address: string) => {\r\n  const nftFarmAbi = nftFarmV2 as unknown as AbiItem\r\n  return useContract(nftFarmAbi, address)\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const abi = lottery as unknown as AbiItem\r\n  return useContract(abi, getLotteryAddress())\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const abi = lotteryTicket as unknown as AbiItem\r\n  return useContract(abi, getLotteryTicketAddress())\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const abi = masterChef as unknown as AbiItem\r\n  return useContract(abi, getMasterChefAddress())\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\r\n  const abi = rawAbi as unknown as AbiItem\r\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\r\n}\r\n\r\nexport default useContract\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface ImageProps {\r\n  src: string\r\n  alt: string\r\n  originalLink?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 32px 32px 0 0;\r\n`\r\n\r\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\r\n  const previewImage = <StyledImage src={src} alt={alt} />\r\n\r\n  return (\r\n    <Container>\r\n      {originalLink ? (\r\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/newnfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\r\nimport { NftFarm } from 'config/constants/newnfts'\r\nimport multicall from 'utils/multicall'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype NftMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  ownerById: number[]\r\n  amounts: number[]\r\n  maxMintByNft: number[]\r\n  prices: number[]\r\n  myMints: number[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: NftMap\r\n\r\n  allowMultipleClaims: boolean\r\n  rarity: string\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n  tokenPerBurn: number\r\n  isApproved: boolean\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    ownerById: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    rarity: '',\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n    tokenPerBurn: 0,\r\n\r\n    amounts: [],\r\n    maxMintByNft: [],\r\n    prices: [],\r\n    myMints: [],\r\n    isApproved: false,\r\n  })\r\n  const { account } = useWallet()\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        // const [\r\n        //   // startBlockNumberArr,\r\n        //   // endBlockNumberArr,\r\n        //   // countBurntArr,\r\n        //   // totalSupplyDistributedArr,\r\n        //   // currentDistributedSupplyArr,\r\n\r\n        //   // allowMultipleClaimsArr,\r\n        //   // rarityArr,\r\n        //   // priceMultiplierArr,\r\n        //   // maxMintPerNftArr,\r\n        //   // tokenPerBurnArr,\r\n        // ] = await multicall(nftFarm, [\r\n        //   // { address: NftFarm, name: 'startBlockNumber' },\r\n        //   // { address: NftFarm, name: 'endBlockNumber' },\r\n        //   // { address: NftFarm, name: 'countBurnt' },\r\n        //   // { address: NftFarm, name: 'totalSupplyDistributed' },\r\n        //   // { address: NftFarm, name: 'currentDistributedSupply' },\r\n        //   // { address: NftFarm, name: 'allowMultipleClaims' },\r\n        //   // { address: NftFarm, name: 'rarity' },\r\n        //   // { address: NftFarm, name: 'priceMultiplier' },\r\n        //   // { address: NftFarm, name: 'maxMintPerNft' },\r\n        //   // { address: NftFarm, name: 'tokenPerBurn' },\r\n        // ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        // const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        // const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        // const [countBurnt]: [BigNumber] = countBurntArr\r\n        // const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        // const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          // countBurnt: countBurnt.toNumber(),\r\n          // startBlockNumber: startBlockNumber.toNumber(),\r\n          // endBlockNumber: endBlockNumber.toNumber(),\r\n          // currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          // totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          // allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          // rarity: rarityArr[0].toString(),\r\n          // priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          // maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n          // tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const getMinted = await multicall(nftFarmV2, [{ address: NftFarm, name: 'getMinted', params: [account] }])\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const ownerById = getMinted[0][2]\r\n        const maxMintByNft = getToInt(getMinted[0][3])\r\n        const prices = getFromWayArray(getMinted[0][4])\r\n        const myMints = getToInt(getMinted[0][5])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('ownerById', ownerById)\r\n        // console.log('maxMintByNft', maxMintByNft)\r\n        // console.log('prices', prices)\r\n        // console.log('myMints', myMints)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        let nftMap: NftMap = {}\r\n\r\n        const isApproved = await nftContract.methods.isApprovedForAll(account, NftFarm).call()\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndNftId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getNftId(tokenId).call()\r\n\r\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndNftId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          ownerById,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          maxMintByNft,\r\n          prices,\r\n          myMints,\r\n          isApproved,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    const fetchNonLoggedInContractData = async () => {\r\n      try {\r\n        const getMinted = await multicall(nftFarmV2, [\r\n          { address: NftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\r\n        ])\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          amounts,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    } else {\r\n      fetchNonLoggedInContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import React, { useState, useContext, useCallback, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n} from '@pancakeswap-libs/uikit'\r\nimport _ from 'lodash'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft, SellableNft } from 'config/constants/types'\r\nimport { AMOUNT_TO_CLAIM, NftFarm, NFT } from 'config/constants/newnfts'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { usePancakeRabbits, useNFTFarmV2Contract } from 'hooks/useContract'\r\nimport InfoRow from '../InfoRow'\r\nimport Image from '../Image'\r\nimport { NftProviderContext } from '../../contexts/NftProvider'\r\nimport { getNewNftContract } from '../../utils/contracts'\r\n\r\ninterface NftCardProps {\r\n  nft: SellableNft\r\n}\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 44px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 0 24px 24px;\r\n`\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ViewNft = styled(Text)`\r\n  @media (max-width: 1300px) {\r\n    font-size: 11px;\r\n  }\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: false,\r\n    nftCount: 0,\r\n    nftBurnCount: 0,\r\n  })\r\n  const [minted, setMinted] = useState(0)\r\n  const [maxMint, setMaxMint] = useState(0)\r\n  const [price, setPrice] = useState(new BigNumber(0))\r\n  const TranslateString = useI18n()\r\n  const {\r\n    isInitialized,\r\n    hasClaimed,\r\n    ownerById,\r\n    canBurnNft,\r\n    totalSupplyDistributed,\r\n    currentDistributedSupply,\r\n    getTokenIds,\r\n    reInitialize,\r\n    allowMultipleClaims,\r\n    rarity,\r\n    priceMultiplier,\r\n    maxMintPerNft,\r\n    tokenPerBurn,\r\n    amounts,\r\n    maxMintByNft,\r\n    prices,\r\n    myMints,\r\n    isApproved,\r\n  } = useContext(NftProviderContext)\r\n  const { account } = useWallet()\r\n  const history = useHistory()\r\n\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const [error, setError] = useState(null)\r\n  // maxMintPerNft limit max amount that a nft can be minted\r\n  // maxMintByNft array containing individual amount of mint per nft index\r\n  // prices array containing individual prices of a mint per nft index\r\n  // tokenPerBurn global price\r\n\r\n  const { nftId, name, previewImage, originalImage, description, tokenAmount, tokenSupply, sellMinPrice, sellableTradeIds, totalQuantity } = nft\r\n  const PRICE = prices[nftId] || tokenPerBurn // here we get the price\r\n\r\n  let minTradeId:number;\r\n  if(typeof sellableTradeIds === 'object' && _.size(sellableTradeIds) > 0) {\r\n    minTradeId = Math.min( ...sellableTradeIds )\r\n  }\r\n\r\n  const firstCharOfAccount = account != null && account.slice(0, 4)\r\n  const lastCharOfAccount = account != null && account.slice(-4)\r\n\r\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\r\n\r\n  const MINTS = myMints[nftIndex] || 0\r\n\r\n\r\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\r\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\r\n\r\n\r\n  useEffect(() => {\r\n    const getNftInfoState = async () => {\r\n      const newFarmContract = getNewNftContract()\r\n      const nftInfoState = await newFarmContract.methods.nftInfoState(nftId).call()\r\n      const { minted: mintedValue, maxMint: maxMintValue, price: priceValue } = nftInfoState\r\n      setMinted(parseInt(mintedValue))\r\n      setMaxMint(parseInt(maxMintValue))\r\n      setPrice(new BigNumber(priceValue).div(new BigNumber(10).pow(18)))\r\n    }\r\n    getNftInfoState()\r\n  }, [nftId, isInitialized])\r\n\r\n  // const walletOwnsNft = tokenIds && tokenIds.length > 0\r\n  const walletOwnsNft = MINTS > 0\r\n\r\n  const fetchDetails = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      const { methods } = getNewNftContract()\r\n      const nftCount = await methods.nftCount(nftId).call()\r\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        nftCount: parseInt(nftCount, 10),\r\n        nftBurnCount: parseInt(nftBurnCount, 10),\r\n      }))\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n  }, [nftId])\r\n\r\n\r\n  const nftContract = usePancakeRabbits(NFT)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setState((prevState) => ({ ...prevState, isLoading: true }))\r\n      setRequestedApproval(true)\r\n      await nftContract.methods\r\n        .setApprovalForAll(NftFarm, 'true')\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          console.log('receipt')\r\n        })\r\n        .on('error', () => {\r\n          setError('Unable to transfer NFT')\r\n          setIsLoading(false)\r\n        })\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n      }))\r\n\r\n      fetchDetails()\r\n      reInitialize()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [account, nftContract, reInitialize, fetchDetails])\r\n\r\n  const newFarmContract = useNFTFarmV2Contract(NftFarm)\r\n  const handleBuy = useCallback(async () => {\r\n    try {\r\n\r\n      setState((prevState) => ({ ...prevState, isLoading: true }))\r\n      await newFarmContract.methods\r\n        .buy(minTradeId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          console.log('receipt')\r\n        })\r\n        .on('error', () => {\r\n          setError('Unable to buy NFT')\r\n          setIsLoading(false)\r\n        })\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n      }))\r\n\r\n      fetchDetails()\r\n      reInitialize()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [account, newFarmContract, reInitialize, fetchDetails, minTradeId])\r\n\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft}>\r\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          <Tag outline variant=\"failure\">\r\n            {totalQuantity} {' for Sale'}\r\n          </Tag>\r\n        </Header>\r\n\r\n        <Header>\r\n          <Tag outline variant=\"primary\">\r\n            {sellMinPrice / 10 ** 18}\r\n          </Tag>\r\n        </Header>\r\n        {isInitialized && walletOwnsNft && !isApproved && (\r\n          <Button\r\n            fullWidth\r\n            variant=\"primary\"\r\n            mt=\"24px\"\r\n            onClick={() => {\r\n              handleApprove()\r\n            }}\r\n          >\r\n            Approve\r\n          </Button>\r\n        )}\r\n        {isInitialized && walletOwnsNft && isApproved && (\r\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={() => {\r\n            handleBuy()\r\n          }}>\r\n            {TranslateString(999, 'Buy')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import styled from 'styled-components'\r\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\r\n\r\nconst NftGrid = styled(BaseLayout)`\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n\r\n  & > div {\r\n    grid-column: 2 / 6;\r\n\r\n    ${({ theme }) => theme.mediaQueries.sm} {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nexport default NftGrid\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\n\r\nconst NftList = (props) => {\r\n  const { data: nfts } = props\r\n  return (\r\n    <NftGrid>\r\n      {orderBy(nfts, 'sortOrder').map((nft) => (\r\n        <div key={nft.nftId}>\r\n          <NftCard nft={nft} />\r\n        </div>\r\n      ))}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React, { useContext } from 'react'\r\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport InfoRow from './InfoRow'\r\n\r\nconst NftProgressSimple = () => {\r\n  const TranslateString = useI18n()\r\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Total Base and Rare NFTs Claimed')}:</Text>\r\n          <Text>\r\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\r\n          </Text>\r\n        </InfoRow>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftProgressSimple\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport NftProgress from './NftProgress'\r\nimport NftProgressSimple from './NftProgressSimple'\r\nimport StatusCard from './StatusCard'\r\n\r\nconst StyledNtfInfo = styled.div`\r\n  align-items: start;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`\r\n\r\nconst NftInfo = () => {\r\n  const { canBurnNft } = useContext(NftProviderContext)\r\n\r\n  return <NftProgressSimple />\r\n}\r\n\r\nexport default NftInfo\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Button } from '@pancakeswap-libs/uikit'\r\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport nfts from 'config/constants/newnfts'\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport NftInfo from './components/NftInfo'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray, getNewNftContract } from './utils/contracts'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst CustomButton = styled(Button)`\r\n  margin-right: 20px;\r\n`\r\n\r\nconst GoldenButton = styled(Button)`\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\r\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\r\n  border: 1px solid #a55d07;\r\n  color: rgb(120, 50, 5);\r\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  background-size: 100% 100%;\r\n  background-position: center;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    background-size: 150% 150%;\r\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n    border: 1px solid rgba(165, 93, 7, 0.6);\r\n    color: rgba(120, 50, 5, 0.8);\r\n  }\r\n  &:active {\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  }\r\n`\r\n\r\nconst NftMarketplace = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [NFTs, setNFTs] = useState(nfts)\r\n\r\n  const filterNFTs = useCallback(async (rarity = '') => {\r\n\r\n    const filteredNFTs = rarity !== '' ? nfts.filter((nft) => nft.rarity === rarity) : nfts;\r\n\r\n    const newNftContract = getNewNftContract()\r\n\r\n    const sellableNFTs = [];\r\n    filteredNFTs.forEach(async (nft) => {\r\n      const nftSecondaryMarket = await newNftContract.methods.nftSecondaryMarket(nft.nftId).call()\r\n      const { nftId, allowSell, sellMinPrice, totalArtistFee, totalGovernanceFee, lastSellIn, lastSellPrice, qtdSells, totalCollected, totalDevFee } = nftSecondaryMarket;\r\n      if(nftSecondaryMarket.allowSell === true) {\r\n        const sellableTradeIds = await newNftContract.methods.getListOpenTradesByNftId(nft.nftId).call()\r\n        const totalQuantity = Array.isArray(sellableTradeIds) && sellableTradeIds.length\r\n        console.log(\"sellableTradeIds\", sellableTradeIds, totalQuantity)\r\n        const tmpObj = {...nft, allowSell, sellMinPrice, totalArtistFee, totalGovernanceFee, lastSellIn, lastSellPrice, qtdSells, totalCollected, totalDevFee, sellableTradeIds, totalQuantity}\r\n        if(totalQuantity > 0) {\r\n          sellableNFTs.push(tmpObj);\r\n        }\r\n      }\r\n    })\r\n    console.log(\"test\", sellableNFTs);\r\n    setNFTs(sellableNFTs)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    filterNFTs()\r\n  }, [filterNFTs])\r\n\r\n  return (\r\n    <NftProvider>\r\n      <Page>\r\n        <StyledHero>\r\n          <Heading as=\"h1\" size=\"xl\" color=\"#9f0d0d\" mb=\"24px\">\r\n            NFT Marketplace\r\n          </Heading>\r\n          <Heading as=\"h2\" size=\"lg\" color=\"#9f0d0d\">\r\n            {TranslateString(999, 'Trade in for ALIFE, or keep for your collection!')}\r\n          </Heading>\r\n          <CustomButton onClick={() => filterNFTs('Base')} mt=\"24px\">\r\n            Base NFTs\r\n          </CustomButton>\r\n          <CustomButton variant=\"success\" onClick={() => filterNFTs('Rare')} mt=\"24px\">\r\n            Rare NFTs\r\n          </CustomButton>\r\n          <CustomButton variant=\"subtle\" onClick={() => filterNFTs('Epic')} mt=\"24px\">\r\n            Epic NFTs\r\n          </CustomButton>\r\n          <GoldenButton onClick={() => filterNFTs('Legendary')} mt=\"24px\">\r\n            Legendary NFTs\r\n          </GoldenButton>\r\n        </StyledHero>\r\n\r\n        <NftInfo />\r\n        <NftList data={NFTs} />\r\n      </Page>\r\n    </NftProvider>\r\n  )\r\n}\r\n\r\nexport default NftMarketplace\r\n"],"sourceRoot":""}