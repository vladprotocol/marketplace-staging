{"version":3,"sources":["config/constants/genesisNfts.ts","../node_modules/react-uuid/uuid.js","hooks/useBlock.ts","config/constants/nfts.ts","constants/index.ts","views/GenesisCollection/components/NftCard/index.tsx","views/GenesisCollection/components/NftList.tsx","views/GenesisCollection/utils/contracts.ts","views/GenesisCollection/contexts/NftProvider.tsx","views/GenesisCollection/index.tsx"],"names":["NftFarm","NFT","NftLiteMarketPlace","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","tokenId","tokenAmount","tokenSupply","nftFarmContract","nftContract","module","exports","hashTable","uuid","i","Math","floor","random","length","join","useBlock","useContext","BlockContext","filterValues","RARITY_RARE","RARITY_BASE","PRICE_LOWEST","PRICE_HIGHEST","NftCard","nft","className","to","sellPrice","orderId","src","alt","pathname","authorTwitter","authorName","BigNumber","div","pow","toFixed","NftList","props","nfts","data","orderBy","map","getNftContract","contractOptions","nftAbi","getContract","getNftLiteMarketplaceContract","nftLiteMarketplaceAbi","nftLiteMarketplace","getFromWayArray","v","array","t","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","account","useWallet","console","log","currentBlock","useEffect","a","multicall","nftFarm","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","error","fetchContractData","params","getMinted","methods","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","getBunnyId","nftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","GenesisCollection","NFTs","setNFTs","isLoading","setIsLoading","currentFilter","setCurrentFilter","setSortOrder","Array","fill","checkedState","filterNFTs","useCallback","newNftLiteMarketplaceContract","filter","sellableNFTs","getOpenOrdersByNFT","forEach","getOrderByOrderId","orderByOrderId","price","user","nftByTokenId","tmpObj","setTimeout","filteredRarityNFTs","handleFilter","id","role","type","onClick","PageLoader"],"mappings":"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","file":"static/js/9.6253dd71.chunk.js","sourcesContent":["import { GenesisNft } from './types'\r\n\r\nexport const NftFarm = '0x6eF08433EA4885177c83fB9698D8B6F9277BeC5c'\r\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\r\nexport const NftLiteMarketPlace = '0x261592eC700656595947694996F334b052B54846'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: GenesisNft[] = [\r\n  {\r\n    name: 'Count Pepes Chocula',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-dark-chocolate.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    tokenId: 147,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392'\r\n  }\r\n]\r\n\r\nexport default Nfts\r\n","/**\nA function that returns a universally unique identifier (uuid).  \nexample: 1b83fd69-abe7-468c-bea1-306a8aa1c81d\n@returns `string` : 32 character uuid (see example)\n*/\nfunction uuid() {\n  const hashTable = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9'\n  ]\n  let uuid = []\n  for (let i = 0; i < 35; i++) {\n    if (i === 7 || i === 12 || i === 17 || i === 22) {\n      uuid[i] = '-'\n    } else {\n      uuid[i] = hashTable[Math.floor(Math.random() * hashTable.length - 1)]\n    }\n  }\n  return uuid.join('')\n}\n\nmodule.exports = uuid\n","import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","import { Nft } from './types'\r\n\r\nexport const NftFarm = '0xaBa054F1437aEBEa43fB0804b734DdB3F39FB62F'\r\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Count Pepes Chocula',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-dark-chocolate.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 0,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Vlad Pepes Drakul',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\r\n    previewImage: 'preview-base-main-nopaint.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 1,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Pepes in Stone',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-marble.jpg',\r\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 2,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'The path to Vladhalla',\r\n    metadata: '',\r\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\r\n    previewImage: 'preview-path-to-vladhalla.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 3,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Painted Pepe',\r\n    metadata: '',\r\n    description:\r\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\r\n    previewImage: 'preview-painted-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 4,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 5,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","// Filters VLAD Collection\r\nconst filterValues = {\r\n    RARITY_RARE: 'rare',\r\n    RARITY_BASE: 'base',\r\n    \r\n    PRICE_LOWEST: 'asc',\r\n    PRICE_HIGHEST: 'desc'\r\n};\r\n\r\nexport default filterValues;","import React, { useState, useContext, useCallback } from 'react'\r\nimport _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\nimport { SellableGenesisNft } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n\r\ninterface NftCardProps {\r\n  nft: SellableGenesisNft\r\n}\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n\r\n  return (\r\n    <div className=\"vcblock\">\r\n      <Link to={`/genesis-detail/${nft.tokenId}?sellPrice=${nft.sellPrice}&orderId=${nft.orderId}`}>\r\n        <img src={`/images/nfts/${nft.previewImage}`} alt={nft.name} className=\"img-fluid\" />\r\n      </Link>\r\n      <div className=\"vcblockhead\">\r\n        <Link to={`/genesis-detail/${nft.tokenId}?sellPrice=${nft.sellPrice}&orderId=${nft.orderId}`}>\r\n          <h6 className=\"inner-title\">{nft.name}</h6>\r\n        </Link>\r\n        <p>By <Link to={{ pathname: nft.authorTwitter }} >{nft.authorName}</Link></p>\r\n        <div className=\"vcblock-smcontent\">\r\n          <p>On Sell for <span className=\"b\">{new BigNumber(nft.sellPrice).div(new BigNumber(10).pow(18)).toFixed()} ALIFE </span></p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport uuid from 'react-uuid'\r\nimport NftCard from './NftCard'\r\n\r\n\r\nconst NftList = (props) => {\r\n  const { data: nfts, sortOrder} = props\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n      {orderBy(nfts, 'sellPriceNum', [sortOrder === 'asc' ? 'asc' : 'desc']).map((nft) => (\r\n        <div className=\"col-sm-12 col-md-4\" key={uuid()}>\r\n          <NftCard nft={nft} />\r\n        </div>\r\n      ))}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftLiteMarketplace from 'config/abi/NftLiteMarketplace.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT, NftLiteMarketPlace } from 'config/constants/genesisNfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getNftLiteMarketplaceContract = (contractOptions?: ContractOptions) => {\r\n  const nftLiteMarketplaceAbi = nftLiteMarketplace as unknown as AbiItem\r\n  return getContract(nftLiteMarketplaceAbi, NftLiteMarketPlace, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport { NftFarm } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype BunnyMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  ownerById: number[]\r\n  amounts: number[]\r\n  maxMintByNft: number[]\r\n  prices: number[]\r\n  myMints: number[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: BunnyMap\r\n\r\n  allowMultipleClaims: boolean\r\n  rarity: string\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n  tokenPerBurn: number\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    ownerById: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    rarity: '',\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n    tokenPerBurn: 0,\r\n\r\n    amounts: [],\r\n    maxMintByNft: [],\r\n    prices: [],\r\n    myMints: [],\r\n  })\r\n  const { account } = useWallet()\r\n  console.log(\"account\", account);\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const [\r\n          startBlockNumberArr,\r\n          endBlockNumberArr,\r\n          countBurntArr,\r\n          totalSupplyDistributedArr,\r\n          currentDistributedSupplyArr,\r\n\r\n          allowMultipleClaimsArr,\r\n          rarityArr,\r\n          priceMultiplierArr,\r\n          maxMintPerNftArr,\r\n          tokenPerBurnArr,\r\n        ] = await multicall(nftFarm, [\r\n          { address: NftFarm, name: 'startBlockNumber' },\r\n          { address: NftFarm, name: 'endBlockNumber' },\r\n          { address: NftFarm, name: 'countBurnt' },\r\n          { address: NftFarm, name: 'totalSupplyDistributed' },\r\n          { address: NftFarm, name: 'currentDistributedSupply' },\r\n          { address: NftFarm, name: 'allowMultipleClaims' },\r\n          { address: NftFarm, name: 'rarity' },\r\n          { address: NftFarm, name: 'priceMultiplier' },\r\n          { address: NftFarm, name: 'maxMintPerNft' },\r\n          { address: NftFarm, name: 'tokenPerBurn' },\r\n        ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        const [countBurnt]: [BigNumber] = countBurntArr\r\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          countBurnt: countBurnt.toNumber(),\r\n          startBlockNumber: startBlockNumber.toNumber(),\r\n          endBlockNumber: endBlockNumber.toNumber(),\r\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          rarity: rarityArr[0].toString(),\r\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\r\n\r\n        // console.log('getMinted', getMinted)\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const ownerById = getMinted[0][2]\r\n        const maxMintByNft = getToInt(getMinted[0][3])\r\n        const prices = getFromWayArray(getMinted[0][4])\r\n        const myMints = getToInt(getMinted[0][5])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('ownerById', ownerById)\r\n        // console.log('maxMintByNft', maxMintByNft)\r\n        // console.log('prices', prices)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        let nftMap: BunnyMap = {}\r\n\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndBunnyId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\r\n\r\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          ownerById,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          maxMintByNft,\r\n          prices,\r\n          myMints,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    const fetchNonLoggedInContractData = async () => {\r\n      try {\r\n        const getMinted = await multicall(nftFarm, [\r\n          { address: NftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\r\n        ])\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          amounts,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    } else {\r\n      fetchNonLoggedInContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport _ from 'lodash';\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport nfts, { NFT } from 'config/constants/genesisNfts'\r\nimport PageLoader from 'components/PageLoader';\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport { getNftLiteMarketplaceContract } from './utils/contracts'\r\nimport filterValues from '../../constants';\r\n\r\nconst GenesisCollection = () => {\r\n\r\n  const [NFTs, setNFTs] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [currentFilter, setCurrentFilter] = useState('PRICE_LOWEST');\r\n  const [sortOrder, setSortOrder] = useState(filterValues.PRICE_LOWEST);\r\n\r\n  \r\n  const { account } = useWallet()\r\n\r\n  const [checkedState, setCheckedState] = useState(\r\n    new Array(6).fill(false)\r\n  );\r\n\r\n  const filterNFTs = useCallback(async (filter = '') => {\r\n\r\n    setIsLoading(true);\r\n\r\n    const newNftLiteMarketplaceContract = getNftLiteMarketplaceContract()\r\n\r\n    let filteredNFTs = nfts;\r\n\r\n    // Inner filter based on format type.\r\n    if(checkedState[0]) {\r\n      filteredNFTs = nfts.filter((nft) => nft.fileType === 'mp4');\r\n    }\r\n\r\n    if(checkedState[1]) {\r\n      filteredNFTs = nfts.filter((nft) => nft.fileType === 'jpg');\r\n    }\r\n\r\n    const sellableNFTs = [];\r\n\r\n    const openOrdersByNFT = await newNftLiteMarketplaceContract.methods.getOpenOrdersByNFT(NFT).call();\r\n\r\n    openOrdersByNFT.forEach(async (orderId) => {\r\n      const orderByOrderId = await newNftLiteMarketplaceContract.methods.getOrderByOrderId(orderId).call();\r\n      const { tokenId, price: sellPrice, user } = orderByOrderId;\r\n      const [ nftByTokenId ] = nfts.filter((nft) => nft.tokenId === parseInt(orderByOrderId.tokenId));\r\n      if(nftByTokenId) {\r\n        const tmpObj = {\r\n          ...nftByTokenId,\r\n          tokenId,\r\n          sellPrice,\r\n          user,\r\n          authorName: 'Shri',\r\n          orderId\r\n        }\r\n        sellableNFTs.push(tmpObj);\r\n      }\r\n    });\r\n\r\n    // Rarity Inner Filters\r\n    setTimeout(() => {\r\n\r\n      setNFTs(sellableNFTs);\r\n\r\n      let filteredRarityNFTs = [];\r\n\r\n      if(checkedState[2]) {\r\n        filteredRarityNFTs = sellableNFTs.filter((nft) => nft.rarity === 'base');\r\n        setNFTs(filteredRarityNFTs);\r\n      }\r\n\r\n      if(checkedState[3]) {\r\n        filteredRarityNFTs = sellableNFTs.filter((nft) => nft.rarity === 'rare');\r\n        setNFTs(filteredRarityNFTs);\r\n      }\r\n\r\n      if(checkedState[4]) {\r\n        filteredRarityNFTs = sellableNFTs.filter((nft) => nft.rarity === 'epic');\r\n        setNFTs(filteredRarityNFTs);\r\n      }\r\n\r\n      if(checkedState[5]) {\r\n        filteredRarityNFTs = sellableNFTs.filter((nft) => nft.rarity === 'legendary');\r\n        setNFTs(filteredRarityNFTs);\r\n      }\r\n    }, 0);\r\n\r\n    setTimeout(() => {\r\n      setIsLoading(false);\r\n    }, 1000);\r\n\r\n  }, [checkedState])\r\n\r\n\r\n  const handleFilter = async (filter) => {\r\n    if(filter === 'PRICE_LOWEST') {\r\n      setSortOrder(filterValues.PRICE_LOWEST);\r\n    } else if(filter === 'PRICE_HIGHEST') {\r\n      setSortOrder(filterValues.PRICE_HIGHEST);\r\n    }\r\n    setCurrentFilter(filter);\r\n    await filterNFTs(currentFilter)\r\n  }\r\n\r\n  const handleInnerFilter = async (position) => {\r\n    const updatedCheckedState = checkedState.map((item, index) =>\r\n      index === position ? !item : item\r\n    );\r\n    setCheckedState(updatedCheckedState);\r\n    await filterNFTs(currentFilter);\r\n  }\r\n\r\n  useEffect(() => {\r\n    filterNFTs(currentFilter)\r\n  }, [filterNFTs, currentFilter, account])\r\n\r\n  return (\r\n    <NftProvider>\r\n      <section className=\"vcollectionsec section-min-height\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12 mb-5 vchead\">\r\n              <h3>Genesis Collections</h3>\r\n\r\n              {/* TODO:: Add filter control when bid is available. */}\r\n              {/* <div className=\"vctab-wrap\">\r\n                <ul className=\"vctab nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink active\" id=\"pills-home-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-home\" type=\"button\" role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">ALL</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink\" id=\"pills-profile-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-profile\" type=\"button\" role=\"tab\" aria-controls=\"pills-profile\" >FOR SALE</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink\" id=\"pills-contact-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-contact\" type=\"button\" role=\"tab\" aria-controls=\"pills-contact\" >BID</button>\r\n                  </li>\r\n                </ul>\r\n              </div> */}\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12\">\r\n              <div className=\"pricefilterwrap\">\r\n                <ul className=\"nav nav-pills pricefilterpills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button\r\n                      className={`nav-link pricelink ${currentFilter === 'PRICE_LOWEST' ? 'active' : ''}`}\r\n                      id=\"pills-home-tab\"\r\n                      data-bs-toggle=\"pill\"\r\n                      data-bs-target=\"#price-lowest\"\r\n                      type=\"button\"\r\n                      role=\"tab\"\r\n                      aria-controls=\"pills-home\"\r\n                      aria-selected=\"true\"\r\n                      onClick={() => handleFilter('PRICE_LOWEST')}\r\n                    >\r\n                      Price - Lowest\r\n                    </button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button\r\n                      className={`nav-link pricelink ${currentFilter === 'PRICE_HIGHEST' ? 'active' : ''}`}\r\n                      id=\"pills-profile-tab\"\r\n                      data-bs-toggle=\"pill\"\r\n                      data-bs-target=\"#price-highest\"\r\n                      type=\"button\"\r\n                      role=\"tab\"\r\n                      aria-controls=\"pills-profile\"\r\n                      aria-selected=\"false\"\r\n                      onClick={() => handleFilter('PRICE_HIGHEST')}\r\n                    >\r\n                      Price - Highest\r\n                    </button>\r\n                  </li>\r\n                  {/* Not used in Shibari Collection. Needed only in Genesis. */}\r\n                  {/* <li className=\"nav-item\" role=\"presentation\">\r\n                    <button\r\n                      className={`nav-link pricelink ${currentFilter === 'RARITY_RARE' ? 'active' : ''}`}\r\n                      id=\"pills-contact-tab\"\r\n                      data-bs-toggle=\"pill\"\r\n                      data-bs-target=\"#rarity-rare\"\r\n                      type=\"button\"\r\n                      role=\"tab\"\r\n                      aria-controls=\"pills-contact\"\r\n                      aria-selected=\"false\"\r\n                      onClick={() => handleFilter('RARITY_RARE')}\r\n                    >\r\n                      Rarity - Rare\r\n                    </button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button\r\n                      className={`nav-link pricelink ${currentFilter === 'RARITY_BASE' ? 'active' : ''}`}\r\n                      id=\"pills-contact-tab\"\r\n                      data-bs-toggle=\"pill\"\r\n                      data-bs-target=\"#rarity-common\"\r\n                      type=\"button\"\r\n                      role=\"tab\"\r\n                      aria-controls=\"pills-contact\"\r\n                      aria-selected=\"false\"\r\n                      onClick={() => handleFilter('RARITY_BASE')}\r\n                    >\r\n                      Rarity - Base\r\n                    </button>\r\n                  </li> */}\r\n                </ul>\r\n              </div>\r\n\r\n\r\n              {/* Not used in Shibari Collection. Needed only in Genesis. */}\r\n              {/* <div className=\"vc-filter vc-explore\">\r\n                <ul className=\"nav vc-nav nav-pills\">\r\n                  <li className=\"nav-item vcdropdown pricedropdown dropdown\">\r\n                    <div\r\n                      className=\"nav-link vcdropdown-toggle dropdown-toggle dropbtn\"\r\n                      data-bs-toggle=\"dropdown\"\r\n                      role=\"button\"\r\n                      aria-expanded=\"false\"\r\n                    >\r\n                      Filter <img src=\"assets/images/settings-filter.svg\" alt=\"filter-icon\" className=\"img-fluid\" />\r\n                    </div>\r\n                    \r\n                    <div className=\"dropdown-content\">\r\n\r\n                      <p>Format</p>\r\n\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"mp4\"\r\n                            value=\"mp4\"\r\n                            checked={checkedState[0]}\r\n                            onChange={() => handleInnerFilter(0)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            MP4\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"jpg\"\r\n                            value=\"jpg\"\r\n                            checked={checkedState[1]}\r\n                            onChange={() => handleInnerFilter(1)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            JPG\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <hr className=\"seperator\" />\r\n\r\n                      <p>Rarity</p>\r\n\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"base\"\r\n                            value=\"base\"\r\n                            checked={checkedState[2]}\r\n                            onChange={() => handleInnerFilter(2)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Base\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"rare\"\r\n                            value=\"rare\"\r\n                            checked={checkedState[3]}\r\n                            onChange={() => handleInnerFilter(3)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Rare\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"epic\"\r\n                            value=\"epic\"\r\n                            checked={checkedState[4]}\r\n                            onChange={() => handleInnerFilter(4)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Epic\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"legendary\"\r\n                            value=\"legendary\"\r\n                            checked={checkedState[5]}\r\n                            onChange={() => handleInnerFilter(5)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Legendary\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n                    \r\n                    </div>\r\n\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n             */}\r\n            \r\n            \r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Slider */}\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"ctab-content tab-content\" id=\"pills-tabContent\">\r\n              <div\r\n                className=\"tab-pane fade show active ctabpane\"\r\n                id=\"pills-home\"\r\n                role=\"tabpanel\"\r\n                aria-labelledby=\"pills-home-tab\"\r\n              >\r\n                {isLoading ? <PageLoader /> : <NftList data={NFTs} sortOrder={sortOrder} />}\r\n              </div>\r\n              {/* END OF ALL TAB */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </NftProvider>\r\n  )\r\n\r\n};\r\n\r\nexport default GenesisCollection;\r\n"],"sourceRoot":""}