{"version":3,"sources":["views/VLADCollection/utils/contracts.ts","hooks/useBlock.ts","../node_modules/react-uuid/uuid.js","views/VLADCollection/components/NftCard/index.tsx","views/VLADCollection/components/NftList.tsx","config/constants/nfts.ts","views/VLADCollection/contexts/NftProvider.tsx","constants/index.ts","views/VLADCollection/index.tsx"],"names":["getNftContract","contractOptions","nftAbi","nft","getContract","NFT","getNewNftContract","nftFarm","NftFarm","getFromWei","v","parseFloat","fromWei","toString","getFromWayArray","array","t","length","i","push","getToFloat","parseInt","getToInt","useBlock","useContext","BlockContext","module","exports","hashTable","uuid","Math","floor","random","join","NftCard","className","to","pathname","trade","src","previewImage","alt","name","authorTwitter","authorName","BigNumber","sellPrice","div","pow","toFixed","NftList","props","nfts","data","sortOrder","orderBy","map","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","account","useWallet","console","log","currentBlock","useEffect","a","multicall","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","error","fetchContractData","nftContract","params","getMinted","methods","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","nftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","filterValues","RARITY_RARE","RARITY_BASE","PRICE_LOWEST","PRICE_HIGHEST","VLADCollection","NFTs","setNFTs","isLoading","setIsLoading","currentFilter","setCurrentFilter","setSortOrder","Array","fill","checkedState","setCheckedState","filterNFTs","useCallback","filter","newNftContract","filteredNFTs","fileType","sellableNFTs","forEach","nftSecondaryMarket","nftInfo","allowSell","sellMinPrice","totalArtistFee","totalGovernanceFee","lastSellIn","lastSellPrice","qtdSells","totalCollected","totalDevFee","getListOpenTradesByNftId","sellableTradeIds","totalQuantity","isArray","nftSecondaryTradeInfo","sellDate","soldDate","tmpObj","sellPriceNum","setTimeout","filteredRarityNFTs","handleFilter","handleInnerFilter","position","updatedCheckedState","item","id","role","type","onClick","checked","onChange","htmlFor","PageLoader"],"mappings":"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","file":"static/js/10.ef4fd010.chunk.js","sourcesContent":["import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/newnfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","/**\nA function that returns a universally unique identifier (uuid).  \nexample: 1b83fd69-abe7-468c-bea1-306a8aa1c81d\n@returns `string` : 32 character uuid (see example)\n*/\nfunction uuid() {\n  const hashTable = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9'\n  ]\n  let uuid = []\n  for (let i = 0; i < 35; i++) {\n    if (i === 7 || i === 12 || i === 17 || i === 22) {\n      uuid[i] = '-'\n    } else {\n      uuid[i] = hashTable[Math.floor(Math.random() * hashTable.length - 1)]\n    }\n  }\n  return uuid.join('')\n}\n\nmodule.exports = uuid\n","import React, { useState, useContext, useCallback } from 'react'\r\nimport _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\nimport { SellableNft } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n\r\ninterface NftCardProps {\r\n  nft: SellableNft\r\n}\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n\r\n  return (\r\n    <div className=\"vcblock\">\r\n      <Link to={{\r\n        pathname: `/vlad-detail/${nft.trade}`\r\n      }}>\r\n        <img src={`/images/nfts/${nft.previewImage}`} alt={nft.name} className=\"img-fluid\" />\r\n      </Link>\r\n      <div className=\"vcblockhead\">\r\n        <Link to={`/vlad-detail/${nft.trade}`}>\r\n          <h6 className=\"inner-title\">{nft.name}</h6>\r\n        </Link>\r\n        <p>By <Link to={{ pathname: nft.authorTwitter }} >{nft.authorName}</Link></p>\r\n        <div className=\"vcblock-smcontent\">\r\n          <p>On Sell for <span className=\"b\">{new BigNumber(nft.sellPrice).div(new BigNumber(10).pow(18)).toFixed()} ALIFE </span></p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport uuid from 'react-uuid'\r\nimport NftCard from './NftCard'\r\n\r\n\r\nconst NftList = (props) => {\r\n  const { data: nfts, sortOrder} = props\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n      {orderBy(nfts, 'sellPriceNum', [sortOrder === 'asc' ? 'asc' : 'desc']).map((nft) => (\r\n        <div className=\"col-sm-12 col-md-4\" key={uuid()}>\r\n          <NftCard nft={nft} />\r\n        </div>\r\n      ))}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import { Nft } from './types'\r\n\r\nexport const NftFarm = '0xaBa054F1437aEBEa43fB0804b734DdB3F39FB62F'\r\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Count Pepes Chocula',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-dark-chocolate.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 0,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Vlad Pepes Drakul',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\r\n    previewImage: 'preview-base-main-nopaint.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 1,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Pepes in Stone',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-marble.jpg',\r\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 2,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'The path to Vladhalla',\r\n    metadata: '',\r\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\r\n    previewImage: 'preview-path-to-vladhalla.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 3,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Painted Pepe',\r\n    metadata: '',\r\n    description:\r\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\r\n    previewImage: 'preview-painted-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 4,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 5,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport { NftFarm } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype BunnyMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  ownerById: number[]\r\n  amounts: number[]\r\n  maxMintByNft: number[]\r\n  prices: number[]\r\n  myMints: number[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: BunnyMap\r\n\r\n  allowMultipleClaims: boolean\r\n  rarity: string\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n  tokenPerBurn: number\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    ownerById: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    rarity: '',\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n    tokenPerBurn: 0,\r\n\r\n    amounts: [],\r\n    maxMintByNft: [],\r\n    prices: [],\r\n    myMints: [],\r\n  })\r\n  const { account } = useWallet()\r\n  console.log(\"account\", account);\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const [\r\n          startBlockNumberArr,\r\n          endBlockNumberArr,\r\n          countBurntArr,\r\n          totalSupplyDistributedArr,\r\n          currentDistributedSupplyArr,\r\n\r\n          allowMultipleClaimsArr,\r\n          rarityArr,\r\n          priceMultiplierArr,\r\n          maxMintPerNftArr,\r\n          tokenPerBurnArr,\r\n        ] = await multicall(nftFarm, [\r\n          { address: NftFarm, name: 'startBlockNumber' },\r\n          { address: NftFarm, name: 'endBlockNumber' },\r\n          { address: NftFarm, name: 'countBurnt' },\r\n          { address: NftFarm, name: 'totalSupplyDistributed' },\r\n          { address: NftFarm, name: 'currentDistributedSupply' },\r\n          { address: NftFarm, name: 'allowMultipleClaims' },\r\n          { address: NftFarm, name: 'rarity' },\r\n          { address: NftFarm, name: 'priceMultiplier' },\r\n          { address: NftFarm, name: 'maxMintPerNft' },\r\n          { address: NftFarm, name: 'tokenPerBurn' },\r\n        ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        const [countBurnt]: [BigNumber] = countBurntArr\r\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          countBurnt: countBurnt.toNumber(),\r\n          startBlockNumber: startBlockNumber.toNumber(),\r\n          endBlockNumber: endBlockNumber.toNumber(),\r\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          rarity: rarityArr[0].toString(),\r\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\r\n\r\n        // console.log('getMinted', getMinted)\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const ownerById = getMinted[0][2]\r\n        const maxMintByNft = getToInt(getMinted[0][3])\r\n        const prices = getFromWayArray(getMinted[0][4])\r\n        const myMints = getToInt(getMinted[0][5])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('ownerById', ownerById)\r\n        // console.log('maxMintByNft', maxMintByNft)\r\n        // console.log('prices', prices)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        let nftMap: BunnyMap = {}\r\n\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndBunnyId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\r\n\r\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          ownerById,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          maxMintByNft,\r\n          prices,\r\n          myMints,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    const fetchNonLoggedInContractData = async () => {\r\n      try {\r\n        const getMinted = await multicall(nftFarm, [\r\n          { address: NftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\r\n        ])\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          amounts,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    } else {\r\n      fetchNonLoggedInContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","// Filters VLAD Collection\r\nconst filterValues = {\r\n    RARITY_RARE: 'rare',\r\n    RARITY_BASE: 'base',\r\n    \r\n    PRICE_LOWEST: 'asc',\r\n    PRICE_HIGHEST: 'desc'\r\n};\r\n\r\nexport default filterValues;","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport _ from 'lodash';\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport nfts, { NFT } from 'config/constants/newnfts'\r\nimport PageLoader from 'components/PageLoader';\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport { getNewNftContract } from './utils/contracts'\r\nimport filterValues from '../../constants';\r\n\r\nconst VLADCollection = () => {\r\n\r\n  const [NFTs, setNFTs] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [currentFilter, setCurrentFilter] = useState('PRICE_LOWEST');\r\n  const [sortOrder, setSortOrder] = useState(filterValues.PRICE_LOWEST);\r\n\r\n  \r\n  const { account } = useWallet()\r\n\r\n  const [checkedState, setCheckedState] = useState(\r\n    new Array(6).fill(false)\r\n  );\r\n\r\n  const filterNFTs = useCallback(async (filter = '') => {\r\n\r\n    setIsLoading(true);\r\n\r\n    const newNftContract = getNewNftContract()\r\n\r\n    let filteredNFTs = nfts;\r\n\r\n    // Inner filter based on format type.\r\n    if(checkedState[0]) {\r\n      filteredNFTs = nfts.filter((nft) => nft.fileType === 'mp4');\r\n    }\r\n\r\n    if(checkedState[1]) {\r\n      filteredNFTs = nfts.filter((nft) => nft.fileType === 'jpg');\r\n    }\r\n\r\n\r\n    const sellableNFTs = [];\r\n    filteredNFTs.forEach(async (nft) => {\r\n      const nftSecondaryMarket = await newNftContract.methods.nftSecondaryMarket(nft.nftId).call()\r\n      const nftInfo = await newNftContract.methods.nftInfo(nft.nftId).call();\r\n      const { authorName, authorTwitter, rarity } = nftInfo;\r\n      const { allowSell, sellMinPrice, totalArtistFee, totalGovernanceFee, lastSellIn, lastSellPrice, qtdSells, totalCollected, totalDevFee } = nftSecondaryMarket;\r\n\r\n      if (nftSecondaryMarket.allowSell === true) {\r\n        const sellableTradeIds = await newNftContract.methods.getListOpenTradesByNftId(nft.nftId).call()\r\n        const totalQuantity = Array.isArray(sellableTradeIds) && sellableTradeIds.length\r\n\r\n        sellableTradeIds.forEach(async (trade) => {\r\n          const nftSecondaryTradeInfo = await newNftContract.methods.nftSecondaryTradeInfo(trade).call()\r\n          const { sellPrice, sellDate, soldDate } = nftSecondaryTradeInfo;\r\n\r\n          const tmpObj = {\r\n            ...nft,\r\n            allowSell,\r\n            sellMinPrice,\r\n            totalArtistFee,\r\n            totalGovernanceFee,\r\n            lastSellIn,\r\n            lastSellPrice,\r\n            qtdSells,\r\n            totalCollected,\r\n            totalDevFee,\r\n            trade,\r\n            totalQuantity,\r\n            authorName,\r\n            authorTwitter,\r\n            sellPrice,\r\n            sellPriceNum: parseFloat(new BigNumber(sellPrice).div(new BigNumber(10).pow(18)).toFixed()), // Used for sorting\r\n            sellDate,\r\n            soldDate,\r\n            rarity\r\n          }\r\n\r\n          // Outer Filter based on rarity.\r\n          if((filter === 'RARITY_RARE' && rarity === filterValues.RARITY_RARE)) {\r\n            sellableNFTs.push(tmpObj);\r\n          } else if(filter === 'RARITY_BASE' && rarity === filterValues.RARITY_BASE) {\r\n            sellableNFTs.push(tmpObj);\r\n          } else if (filter === 'PRICE_LOWEST' || filter === 'PRICE_HIGHEST') {\r\n            sellableNFTs.push(tmpObj);\r\n          }\r\n\r\n        })\r\n      }\r\n    })\r\n\r\n    // Rarity Inner Filters\r\n    setTimeout(() => {\r\n\r\n      setNFTs(sellableNFTs);\r\n\r\n      let filteredRarityNFTs = [];\r\n\r\n      if(checkedState[2]) {\r\n        filteredRarityNFTs = sellableNFTs.filter((nft) => nft.rarity === 'base');\r\n        setNFTs(filteredRarityNFTs);\r\n      }\r\n\r\n      if(checkedState[3]) {\r\n        filteredRarityNFTs = sellableNFTs.filter((nft) => nft.rarity === 'rare');\r\n        setNFTs(filteredRarityNFTs);\r\n      }\r\n\r\n      if(checkedState[4]) {\r\n        filteredRarityNFTs = sellableNFTs.filter((nft) => nft.rarity === 'epic');\r\n        setNFTs(filteredRarityNFTs);\r\n      }\r\n\r\n      if(checkedState[5]) {\r\n        filteredRarityNFTs = sellableNFTs.filter((nft) => nft.rarity === 'legendary');\r\n        setNFTs(filteredRarityNFTs);\r\n      }\r\n    }, 0);\r\n\r\n    setTimeout(() => {\r\n      setIsLoading(false);\r\n    }, 1000);\r\n\r\n  }, [checkedState])\r\n\r\n\r\n  const handleFilter = async (filter) => {\r\n    if(filter === 'PRICE_LOWEST') {\r\n      setSortOrder(filterValues.PRICE_LOWEST);\r\n    } else if(filter === 'PRICE_HIGHEST') {\r\n      setSortOrder(filterValues.PRICE_HIGHEST);\r\n    }\r\n    setCurrentFilter(filter);\r\n    await filterNFTs(currentFilter)\r\n  }\r\n\r\n  const handleInnerFilter = async (position) => {\r\n    const updatedCheckedState = checkedState.map((item, index) =>\r\n      index === position ? !item : item\r\n    );\r\n    setCheckedState(updatedCheckedState);\r\n    await filterNFTs(currentFilter);\r\n  }\r\n\r\n  useEffect(() => {\r\n    filterNFTs(currentFilter)\r\n  }, [filterNFTs, currentFilter, account])\r\n\r\n  return (\r\n    <NftProvider>\r\n      <section className=\"vcollectionsec\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12 mb-5 vchead\">\r\n              <h3>VLAD NFT Facts</h3>\r\n\r\n              {/* TODO:: Add filter control when bid is available. */}\r\n              {/* <div className=\"vctab-wrap\">\r\n                <ul className=\"vctab nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink active\" id=\"pills-home-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-home\" type=\"button\" role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">ALL</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink\" id=\"pills-profile-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-profile\" type=\"button\" role=\"tab\" aria-controls=\"pills-profile\" >FOR SALE</button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button className=\"nav-link vclink\" id=\"pills-contact-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#pills-contact\" type=\"button\" role=\"tab\" aria-controls=\"pills-contact\" >BID</button>\r\n                  </li>\r\n                </ul>\r\n              </div> */}\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12\">\r\n              <div className=\"pricefilterwrap\">\r\n                <ul className=\"nav nav-pills pricefilterpills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button\r\n                      className={`nav-link pricelink ${currentFilter === 'PRICE_LOWEST' ? 'active' : ''}`}\r\n                      id=\"pills-home-tab\"\r\n                      data-bs-toggle=\"pill\"\r\n                      data-bs-target=\"#price-lowest\"\r\n                      type=\"button\"\r\n                      role=\"tab\"\r\n                      aria-controls=\"pills-home\"\r\n                      aria-selected=\"true\"\r\n                      onClick={() => handleFilter('PRICE_LOWEST')}\r\n                    >\r\n                      Price - Lowest\r\n                    </button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button\r\n                      className={`nav-link pricelink ${currentFilter === 'PRICE_HIGHEST' ? 'active' : ''}`}\r\n                      id=\"pills-profile-tab\"\r\n                      data-bs-toggle=\"pill\"\r\n                      data-bs-target=\"#price-highest\"\r\n                      type=\"button\"\r\n                      role=\"tab\"\r\n                      aria-controls=\"pills-profile\"\r\n                      aria-selected=\"false\"\r\n                      onClick={() => handleFilter('PRICE_HIGHEST')}\r\n                    >\r\n                      Price - Highest\r\n                    </button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button\r\n                      className={`nav-link pricelink ${currentFilter === 'RARITY_RARE' ? 'active' : ''}`}\r\n                      id=\"pills-contact-tab\"\r\n                      data-bs-toggle=\"pill\"\r\n                      data-bs-target=\"#rarity-rare\"\r\n                      type=\"button\"\r\n                      role=\"tab\"\r\n                      aria-controls=\"pills-contact\"\r\n                      aria-selected=\"false\"\r\n                      onClick={() => handleFilter('RARITY_RARE')}\r\n                    >\r\n                      Rarity - Rare\r\n                    </button>\r\n                  </li>\r\n                  <li className=\"nav-item\" role=\"presentation\">\r\n                    <button\r\n                      className={`nav-link pricelink ${currentFilter === 'RARITY_BASE' ? 'active' : ''}`}\r\n                      id=\"pills-contact-tab\"\r\n                      data-bs-toggle=\"pill\"\r\n                      data-bs-target=\"#rarity-common\"\r\n                      type=\"button\"\r\n                      role=\"tab\"\r\n                      aria-controls=\"pills-contact\"\r\n                      aria-selected=\"false\"\r\n                      onClick={() => handleFilter('RARITY_BASE')}\r\n                    >\r\n                      Rarity - Base\r\n                    </button>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              <div className=\"vc-filter vc-explore\">\r\n                <ul className=\"nav vc-nav nav-pills\">\r\n                  <li className=\"nav-item vcdropdown pricedropdown dropdown\">\r\n                    <div\r\n                      className=\"nav-link vcdropdown-toggle dropdown-toggle dropbtn\"\r\n                      data-bs-toggle=\"dropdown\"\r\n                      role=\"button\"\r\n                      aria-expanded=\"false\"\r\n                    >\r\n                      Filter <img src=\"assets/images/settings-filter.svg\" alt=\"filter-icon\" className=\"img-fluid\" />\r\n                    </div>\r\n                    <div className=\"dropdown-content\">\r\n                      <p>Format</p>\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"mp4\"\r\n                            value=\"mp4\"\r\n                            checked={checkedState[0]}\r\n                            onChange={() => handleInnerFilter(0)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            MP4\r\n                          </label>\r\n                        </div>\r\n                        {/* <div className=\"count\">23</div> */}\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"jpg\"\r\n                            value=\"jpg\"\r\n                            checked={checkedState[1]}\r\n                            onChange={() => handleInnerFilter(1)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            JPG\r\n                          </label>\r\n                        </div>\r\n                        {/* <div className=\"count\">1009</div> */}\r\n                      </div>\r\n                      <hr className=\"seperator\" />\r\n                      <p>Rarity</p>\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"base\"\r\n                            value=\"base\"\r\n                            checked={checkedState[2]}\r\n                            onChange={() => handleInnerFilter(2)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Base\r\n                          </label>\r\n                        </div>\r\n                        {/* <div className=\"count\">6,666</div> */}\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"rare\"\r\n                            value=\"rare\"\r\n                            checked={checkedState[3]}\r\n                            onChange={() => handleInnerFilter(3)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Rare\r\n                          </label>\r\n                        </div>\r\n                        {/* <div className=\"count\">1,998</div> */}\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"epic\"\r\n                            value=\"epic\"\r\n                            checked={checkedState[4]}\r\n                            onChange={() => handleInnerFilter(4)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Epic\r\n                          </label>\r\n                        </div>\r\n                        {/* <div className=\"count\">198</div> */}\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"form-check checkblock\">\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"flexCheckDefault\"\r\n                            name=\"legendary\"\r\n                            value=\"legendary\"\r\n                            checked={checkedState[5]}\r\n                            onChange={() => handleInnerFilter(5)}\r\n                          />\r\n                          <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                            Legendary\r\n                          </label>\r\n                        </div>\r\n                        {/* <div className=\"count\">18</div> */}\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                  {/* <li class=\"nav-item vcdropdown pricedropdown dropdown\">\r\n                    <a class=\"nav-link vcdropdown-toggle dropdown-toggle dropbtn\" data-bs-toggle=\"dropdown\" href=\"#\" role=\"button\" aria-expanded=\"false\">Rarity <img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"down-arrow\"></a>\r\n                    <div class=\"dropdown-content\">\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"down-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"down-arrow\"></div>\r\n                        </a>\r\n                        <P>Rarity</P>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">RARITY</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                        <a href=\"#\">\r\n                            <div class=\"form-check checkblock\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">Legendary</label>\r\n                            </div>\r\n                            <div class=\"count\"><img src=\"assets/images/arrow-down.svg\" alt=\"filter-icon\" class=\"up-arrow\"></div>\r\n                        </a>\r\n                    </div>\r\n                  </li> */}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Slider */}\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"ctab-content tab-content\" id=\"pills-tabContent\">\r\n              <div\r\n                className=\"tab-pane fade show active ctabpane\"\r\n                id=\"pills-home\"\r\n                role=\"tabpanel\"\r\n                aria-labelledby=\"pills-home-tab\"\r\n              >\r\n                {isLoading ? <PageLoader /> : <NftList data={NFTs} sortOrder={sortOrder} />}\r\n              </div>\r\n              {/* END OF ALL TAB */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </NftProvider>\r\n  )\r\n\r\n};\r\n\r\nexport default VLADCollection;\r\n"],"sourceRoot":""}