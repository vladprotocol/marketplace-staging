{"version":3,"sources":["utils/getRpcUrl.ts","contexts/Localisation/translationsContext.ts","contexts/BlockContext.tsx","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","config/constants/contracts.ts","utils/multicall.ts","utils/addressHelpers.ts","config/constants/pools.ts","config/constants/farms.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","state/farms/fetchFarms.ts","state/farms/index.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","state/hooks.ts","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/telegram.svg","components/Menu/twitter.svg","components/Menu/medium.svg","components/Menu/vlad-circle.png","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["nodes","process","getNodeUrl","randomIndex","random","length","defaultTranslationState","translations","setTranslations","TranslationsContext","createContext","BlockContext","React","BlockContextProvider","children","previousBlock","useRef","useState","block","setBlock","useEffect","web3","getWeb3","interval","setInterval","a","eth","getBlockNumber","blockNumber","current","clearInterval","Provider","value","Container","styled","div","theme","mediaQueries","sm","Page","lg","QuoteToken","PoolCategory","cake","56","97","life","masterChef","lifeMasterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","multicall","abi","calls","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","map","call","address","toLowerCase","encodeFunctionData","name","params","methods","aggregate","returnData","res","i","decodeFunctionResult","getCakeAddress","addresses","chainId","getMasterChefAddress","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","pools","farms","pid","mustHaveNft","risk","lpSymbol","lpAddresses","tokenSymbol","tokenAddresses","quoteTokenSymbol","BUSD","quoteTokenAdresses","contracts","ALIFE","LIFE","isTokenOnly","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","prev","useRefresh","useContext","fastRefresh","slowRefresh","fetchFarms","Promise","all","farmsConfig","farmConfig","lpAdress","CHAIN_ID","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","pow","tokenPriceVsQuote","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","info","totalAllocPoint","tokenPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","farm","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","poolsConfig","filter","p","stakingTokenName","BNB","sousId","masterChefABI","PoolsSlice","setPoolsPublicData","livePoolsData","pool","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","ZERO","useFetchPublicData","dispatch","useDispatch","useFarmFromPid","useSelector","usePriceCakeBusd","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","useTheme","StyledThemeCopntext","config","label","icon","href","items","result","status","Menu","props","useWallet","account","connect","reset","cakePriceUsd","location","useLocation","isHome","pathname","login","logout","currentLang","langs","setLang","links","priceLink","className","target","rel","src","vladLogo","alt","style","color","telegramLogo","mediumLogo","twitterLogo","Wrapper","PageLoader","NotFound","lazy","Marketplace","VLADCollection","VLADCollectionDetail","MyNFT","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","fallback","path","exact","component","to","memo","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.cac6d1e0.chunk.js","sourcesContent":["import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'VLAD' = 'VLAD',\r\n  'LIFE' = 'LIFE',\r\n  'ALIFE' = 'ALIFE',\r\n  'VLADALIFE' = 'VLADALIFE',\r\n  'VLADBUSD' = 'VLADBUSD',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  mustHaveNft: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  metadata: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  fileType: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  nftId: number\r\n  tokenAmount: number\r\n  tokenSupply: number\r\n  nftFarmContract: string\r\n  nftContract: string\r\n  rarity?: string\r\n  tradeId?: number\r\n}\r\n\r\nexport type SellableNft = {\r\n  name: string\r\n  metadata: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  fileType: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  nftId: number\r\n  tokenAmount: number\r\n  tokenSupply: number\r\n  nftFarmContract: string\r\n  nftContract: string\r\n  rarity?: string\r\n  tradeId?: number\r\n  allowSell: boolean\r\n  sellMinPrice: number\r\n  totalArtistFee: number\r\n  totalGovernanceFee: number\r\n  lastSellIn: string\r\n  lastSellPrice: number\r\n  qtdSells: number\r\n  totalCollected: number\r\n  totalDevFee: number\r\n  sellableTradeIds: Array<number>\r\n  totalQuantity: number\r\n  authorName: string\r\n  authorTwitter: string\r\n  sellPrice: string\r\n  sellDate: string\r\n  soldDate: string\r\n  trade: number\r\n}\r\n","export default {\r\n  cake: {\r\n    56: '0x42bA7BbDDEcb471c1e1Fe08636918952b6C19019',\r\n    97: '0xFecBE190631196e73A879b317D8A51CC4fE6cB0B',\r\n  },\r\n  life: {\r\n    56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n    97: '0xADA2270B0CB5b6254d3d48A6fEE55b72693B746A',\r\n  },\r\n  masterChef: {\r\n    56: '0x4dC79Cb5330f8403fA2346C894EA0F19701cd7C9',\r\n    97: '0x5eAdf1a622B441Fb53D2b04D2DBE08078c9b0Bc6',\r\n  },\r\n  lifeMasterChef: {\r\n    56: '0x19823254C1E577cc466EAd010A03e4496A2C77d4',\r\n    97: '0xE37Aa693d2Ab77721E11e55bfBC723cf4457b78E',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n  },\r\n  lottery: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee',\r\n  },\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getLifeAddress = () => {\r\n  return addresses.life[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getLifeMasterChefAddress = () => {\r\n  return addresses.lifeMasterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  // {\r\n  //   sousId: 0,\r\n  //   tokenName: 'CAKE',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   contractAddress: {\r\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '10',\r\n  //   sortOrder: 1,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'TWT',\r\n  //   stakingTokenName: QuoteToken.SYRUP,\r\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n  //   contractAddress: {\r\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://trustwallet.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '20',\r\n  //   sortOrder: 999,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n]\r\n\r\nexport default pools\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  {\r\n    pid: 0,\r\n    mustHaveNft: 1,\r\n    risk: 5,\r\n    lpSymbol: 'VLAD-BUSD LP',\r\n    lpAddresses: {\r\n      97: '0xE6cfdE6BA3dEA95898a7d021F37662c5F188986e',\r\n      56: '0x60D5e86c0074b56E52a7540b3bf36c399E9f3038',\r\n    },\r\n    tokenSymbol: 'VLAD',\r\n    tokenAddresses: {\r\n      97: '0xFecBE190631196e73A879b317D8A51CC4fE6cB0B',\r\n      56: '0x279d41f3f78fe5c1f0ba41ae963d6e545113c973',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 1,\r\n    mustHaveNft: 2,\r\n    risk: 5,\r\n    lpSymbol: 'VLAD-BUSD LP',\r\n    lpAddresses: {\r\n      97: '0xE6cfdE6BA3dEA95898a7d021F37662c5F188986e',\r\n      56: '0x60D5e86c0074b56E52a7540b3bf36c399E9f3038',\r\n    },\r\n    tokenSymbol: 'VLAD',\r\n    tokenAddresses: {\r\n      97: '0xFecBE190631196e73A879b317D8A51CC4fE6cB0B',\r\n      56: '0x279d41f3f78fe5c1f0ba41ae963d6e545113c973',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 2,\r\n    mustHaveNft: 3,\r\n    risk: 5,\r\n    lpSymbol: 'VLAD-BUSD LP',\r\n    lpAddresses: {\r\n      97: '0xE6cfdE6BA3dEA95898a7d021F37662c5F188986e',\r\n      56: '0x60D5e86c0074b56E52a7540b3bf36c399E9f3038',\r\n    },\r\n    tokenSymbol: 'VLAD',\r\n    tokenAddresses: {\r\n      97: '0xFecBE190631196e73A879b317D8A51CC4fE6cB0B',\r\n      56: '0x279d41f3f78fe5c1f0ba41ae963d6e545113c973',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 3,\r\n    mustHaveNft: 1,\r\n    risk: 5,\r\n    lpSymbol: 'VLAD-ALIFE LP',\r\n    lpAddresses: {\r\n      97: '0xddBfb33796A705D8C0CB33973937a18a4858cCd2',\r\n      56: '0xEd069710F0BEaf15243043840Ec6267ac047b525',\r\n    },\r\n    tokenSymbol: 'VLAD',\r\n    tokenAddresses: {\r\n      97: '0xFecBE190631196e73A879b317D8A51CC4fE6cB0B',\r\n      56: '0x279d41f3f78fe5c1f0ba41ae963d6e545113c973',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.ALIFE,\r\n    quoteTokenAdresses: contracts.cake,\r\n  },\r\n  {\r\n    pid: 4,\r\n    mustHaveNft: 2,\r\n    risk: 5,\r\n    lpSymbol: 'VLAD-ALIFE LP',\r\n    lpAddresses: {\r\n      97: '0xddBfb33796A705D8C0CB33973937a18a4858cCd2',\r\n      56: '0xEd069710F0BEaf15243043840Ec6267ac047b525',\r\n    },\r\n    tokenSymbol: 'VLAD',\r\n    tokenAddresses: {\r\n      97: '0xFecBE190631196e73A879b317D8A51CC4fE6cB0B',\r\n      56: '0x279d41f3f78fe5c1f0ba41ae963d6e545113c973',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.ALIFE,\r\n    quoteTokenAdresses: contracts.cake,\r\n  },\r\n  {\r\n    pid: 5,\r\n    mustHaveNft: 3,\r\n    risk: 5,\r\n    lpSymbol: 'VLAD-ALIFE LP',\r\n    lpAddresses: {\r\n      97: '0xddBfb33796A705D8C0CB33973937a18a4858cCd2',\r\n      56: '0xEd069710F0BEaf15243043840Ec6267ac047b525',\r\n    },\r\n    tokenSymbol: 'VLAD',\r\n    tokenAddresses: {\r\n      97: '0xFecBE190631196e73A879b317D8A51CC4fE6cB0B',\r\n      56: '0x279d41f3f78fe5c1f0ba41ae963d6e545113c973',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.ALIFE,\r\n    quoteTokenAdresses: contracts.cake,\r\n  },\r\n  {\r\n    pid: 6,\r\n    mustHaveNft: 1,\r\n    risk: 3,\r\n    lpSymbol: 'Life',\r\n    lpAddresses: {\r\n      97: '0xb7419aC5Ff93Ac91047585A28CB37f765B1090B6',\r\n      56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n    },\r\n    tokenSymbol: 'LIFE',\r\n    tokenAddresses: {\r\n      97: '0xa800D23CCc013d2cFF18665cCc4709d45D969841',\r\n      56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.LIFE,\r\n    quoteTokenAdresses: contracts.life,\r\n    isTokenOnly: true,\r\n  },\r\n  {\r\n    pid: 7,\r\n    mustHaveNft: 2,\r\n    risk: 3,\r\n    lpSymbol: 'Life',\r\n    lpAddresses: {\r\n      97: '0x8B7635d524d1eD9518F3Dc32980E13584BB175d8',\r\n      56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n    },\r\n    tokenSymbol: 'LIFE',\r\n    tokenAddresses: {\r\n      97: '0xa800D23CCc013d2cFF18665cCc4709d45D969841',\r\n      56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.LIFE,\r\n    quoteTokenAdresses: contracts.life,\r\n    isTokenOnly: true,\r\n  },\r\n  {\r\n    pid: 8,\r\n    mustHaveNft: 3,\r\n    risk: 5,\r\n    lpSymbol: 'Life',\r\n    lpAddresses: {\r\n      97: '0xa75c80e7Ca70505AAB6062cF15A2cFC71b6138C0',\r\n      56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n    },\r\n    tokenSymbol: 'LIFE',\r\n    tokenAddresses: {\r\n      97: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\r\n      56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.LIFE,\r\n    quoteTokenAdresses: contracts.life,\r\n    isTokenOnly: true,\r\n  },\r\n  {\r\n    pid: 9,\r\n    mustHaveNft: 0,\r\n    risk: 5,\r\n    lpSymbol: 'BUSD-ALIFE LP',\r\n    lpAddresses: {\r\n      97: '0xa75c80e7Ca70505AAB6062cF15A2cFC71b6138C0',\r\n      56: '0xc140a87031617d4fcb7d51e428cd6876664e8348',\r\n    },\r\n    tokenSymbol: 'BUSD',\r\n    tokenAddresses: {\r\n      97: '0xFecBE190631196e73A879b317D8A51CC4fE6cB0B',\r\n      56: '0x42bA7BbDDEcb471c1e1Fe08636918952b6C19019',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n]\r\n\r\nexport default farms\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\n// const web3 = require('web3');\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\r\n        await multicall(erc20, calls)\r\n\r\n      let tokenAmount\r\n      let lpTotalInQuoteToken\r\n      let tokenPriceVsQuote\r\n      if (farmConfig.isTokenOnly) {\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\r\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          tokenPriceVsQuote = new BigNumber(1)\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\r\n      } else {\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(18))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if (tokenAmount.comparedTo(0) > 0) {\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n      }\r\n\r\n      const [info, totalAllocPoint, tokenPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'tokenPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        tokenPerBlock: new BigNumber(tokenPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract(masterChefABI as unknown as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingReward('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    // dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 4 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  const pid = 9 // ALIFE-BUSD LP\r\n  const farm = useFarmFromPid(pid)\r\n  // console.log('farm.tokenPriceVsQuote', farm.tokenPriceVsQuote.toString());\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceVladBusd = (): BigNumber => {\r\n  const pid = 3 // VLAD-BUSD LP\r\n  const farm = useFarmFromPid(pid)\r\n  // console.log('farm.tokenPriceVsQuote', farm.tokenPriceVsQuote.toString());\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceLifeBusd = (): BigNumber => {\r\n  const pid = 1 // VLAD-BUSD LP\r\n  const farm = useFarmFromPid(pid)\r\n  // console.log('farm.tokenPriceVsQuote', farm.tokenPriceVsQuote.toString());\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const vladPrice = usePriceVladBusd()\r\n  let value = new BigNumber(0)\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val = new BigNumber(0)\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\r\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\r\n      } else if (farm.quoteTokenSymbol === QuoteToken.VLAD) {\r\n        val = vladPrice.times(farm.lpTotalInQuoteToken)\r\n      } else {\r\n        val = farm.lpTotalInQuoteToken\r\n      }\r\n      value = value.plus(val)\r\n    }\r\n  }\r\n  return value\r\n}\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  // AR,\r\n  // CA,\r\n  ZHCN,\r\n  ZHTW,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then((r) => r.json())\r\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error('ERROR')\r\n          console.error(e)\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={dark}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Trade $VLAD',\r\n        href: 'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x279d41f3f78fe5c1f0ba41ae963d6e545113c973',\r\n      },\r\n      {\r\n        label: 'Trade $LIFE',\r\n        href: 'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n      },\r\n      {\r\n        label: 'Buy $ALIFE',\r\n        href: 'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x42bA7BbDDEcb471c1e1Fe08636918952b6C19019',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: 'https://exchange.pancakeswap.finance/#/pool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Farm Alife',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'Mint NFTs (Genesis)',\r\n    icon: 'NftIcon',\r\n    href: '/nft',\r\n  },\r\n  {\r\n    label: 'Mint NFTs (New)',\r\n    icon: 'NftIcon',\r\n    href: '/new-nft',\r\n  },\r\n  {\r\n    label: 'My NFT Collection',\r\n    icon: 'NftIcon',\r\n    href: '/my-collection',\r\n  },\r\n  {\r\n    label: 'NFT Marketplace',\r\n    icon: 'NftIcon',\r\n    href: '/marketplace',\r\n  },\r\n  {\r\n    label: 'Past Farms',\r\n    icon: 'PoolIcon',\r\n    href: 'https://life.vlad.finance',\r\n  },\r\n  {\r\n    label: 'More',\r\n    icon: 'MoreIcon',\r\n    items: [\r\n      // {\r\n      //   label: 'Voting',\r\n      //   href: 'https://voting.pancakeswap.finance',\r\n      // },\r\n      {\r\n        label: 'Github',\r\n        href: 'https://github.com/vladprotocol',\r\n      },\r\n      {\r\n        label: 'Token Facts',\r\n        href: 'https://vlad.finance/token-facts',\r\n      },\r\n      {\r\n        label: 'Announcements',\r\n        href: 'https://twitter.com/VladFinance',\r\n      },\r\n      {\r\n        label: 'What is Vlad.Finance',\r\n        href: 'https://vlad-finance.medium.com/introducing-vlad-token-and-the-path-to-immortality-ce96990fdf66/',\r\n      },\r\n      // {\r\n      //   label: 'Roadmap',\r\n      //   href: 'https://vlad-finance.medium.com/roadmap/',\r\n      // },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Gordian Audit Passed',\r\n    icon: 'NftIcon',\r\n    href: 'https://gordian.agency',\r\n  },\r\n  {\r\n    label: 'SOLIDITY Audit Coming Soon',\r\n    icon: 'NftIcon',\r\n    href: '#',\r\n  },\r\n  // {\r\n  //   label: 'Lottery',\r\n  //   icon: 'TicketIcon',\r\n  //   href: '/lottery',\r\n  // },\r\n  // {\r\n  //   label: 'NFT',\r\n  //   icon: 'NftIcon',\r\n  //   href: '/nft',\r\n  // },\r\n]\r\n\r\nexport default config\r\n","export default __webpack_public_path__ + \"static/media/telegram.6493029f.svg\";","export default __webpack_public_path__ + \"static/media/twitter.9a7fa702.svg\";","export default __webpack_public_path__ + \"static/media/medium.753847eb.svg\";","export default __webpack_public_path__ + \"static/media/vlad-circle.ff02a5a1.png\";","import React, { useContext } from 'react'\r\nimport {\r\n  useLocation\r\n} from \"react-router-dom\";\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Menu as UikitMenu, Button } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd/dist/antd.css'\r\nimport './style.css'\r\n// import './innerpage.css'\r\nimport './main.css'\r\nimport telegramLogo from './telegram.svg'\r\nimport twitterLogo from './twitter.svg'\r\nimport mediumLogo from './medium.svg'\r\nimport vladLogo from './vlad-circle.png'\r\n\r\nlet vladValue = '0.00'\r\nlet lifeValue = '0.00'\r\n\r\nfetch(\r\n  'https://api.vlad.finance/price.php?key=6547643&pool=0x60d5e86c0074b56e52a7540b3bf36c399e9f3038&token=0x279d41f3f78fe5c1f0ba41ae963d6e545113c973&decimals=8',\r\n)\r\n  .then((res) => res.json())\r\n  .then(\r\n    (result) => {\r\n      if (result.status === true) {\r\n        vladValue = result.data\r\n      } else {\r\n        vladValue = '0.00'\r\n      }\r\n    },\r\n    (error) => {\r\n      vladValue = '0.00'\r\n    },\r\n  )\r\n  .catch(() => {\r\n    vladValue = '0.00'\r\n  })\r\n\r\nfetch(\r\n  'https://api.vlad.finance/price.php?key=6547643&pool=0x5ee167b75118125e7d46add5ce61f749bb977a00&token=0x50f4220c82c9325dc99f729c3328fb5c338beaae&decimals=18',\r\n)\r\n  .then((res) => res.json())\r\n  .then(\r\n    (result) => {\r\n      if (result.status === true) {\r\n        lifeValue = result.data\r\n      } else {\r\n        lifeValue = '0.00'\r\n      }\r\n    },\r\n    (error) => {\r\n      lifeValue = '0.00'\r\n    },\r\n  )\r\n  .catch(() => {\r\n    lifeValue = '0.00'\r\n  })\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n\r\n  const location = useLocation();\r\n  const isHome = location && location.pathname === \"/\";\r\n\r\n  return (\r\n    <div>\r\n      <UikitMenu\r\n        account={account}\r\n        login={connect}\r\n        logout={reset}\r\n        isDark={isDark}\r\n        currentLang={selectedLanguage && selectedLanguage.code}\r\n        langs={allLanguages}\r\n        setLang={setSelectedLanguage}\r\n        cakePriceUsd={cakePriceUsd.toNumber()}\r\n        links={config}\r\n        priceLink=\"https://bscscan.com/token/0x50f4220C82c9325dC99f729C3328FB5c338BEaae\"\r\n        isHome={isHome}\r\n        {...props}\r\n      />\r\n      <footer>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-3 footer-logoblock\">\r\n              <ul className=\"footer-logo\">\r\n                <li>\r\n                  <a href=\"https://vlad.finance\" target=\"_blank\" rel=\"noreferrer\">\r\n                    <img src={vladLogo} className=\"img-fluid\" alt=\"Vlad Finance\" />\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n              <h4 style={{ color: 'white' }}>Vlad.Finance</h4>\r\n              <p>\r\n                Come for the Immortality. <br /> Stay for the NFTs.\r\n              </p>\r\n              <ul className=\"footermenu\">\r\n                <li>\r\n                  <a href=\"https://vlad.finance/token-facts\" target=\"_blank\" rel=\"noreferrer\">\r\n                    TOKEN FACTS\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a href=\"https://vlad.finance/nft\" target=\"_blank\" rel=\"noreferrer\">\r\n                    NFTs\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a href=\"https://vlad.finance/team\" target=\"_blank\" rel=\"noreferrer\">\r\n                    TEAM\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"col-sm-12 col-md-9 footer-sm\">\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12 col-md-3\">\r\n                  <h6 style={{ color: 'white' }}>COMMUNITY</h6>\r\n                  <ul>\r\n                    <li>\r\n                      <a href=\"https://t.me/VladFinanceOfficial\" target=\"_blank\" rel=\"noreferrer\">\r\n                        <img src={telegramLogo} className=\"img-fluid\" alt=\"\" />\r\n                        <span>Telegram</span>\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"https://vlad-finance.medium.com/\" target=\"_blank\" rel=\"noreferrer\">\r\n                        <img src={mediumLogo} className=\"img-fluid\" alt=\"\" />\r\n                        Medium\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"https://twitter.com/VladFinance\" target=\"_blank\" rel=\"noreferrer\">\r\n                        <img src={twitterLogo} className=\"img-fluid\" alt=\"\" />\r\n                        Twitter\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                <div className=\"col-sm-12 col-md-3\">\r\n                  <h6 style={{ color: 'white' }}>$VLAD</h6>\r\n                  <ul>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://bscscan.com/token/0x279d41f3f78fe5c1f0ba41ae963d6e545113c973\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/fbscscanlogo.svg\" className=\"img-fluid\" alt=\"\" />\r\n                        BSCScan\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x279d41f3f78fe5c1f0ba41ae963d6e545113c973\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/fpancakeswap.svg\" className=\"img-fluid\" alt=\"\" />\r\n                        Buy $VLAD\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://dex.guru/token/0x279d41f3f78fe5c1f0ba41ae963d6e545113c973-bsc\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/dexguru.png\" className=\"img-fluid\" alt=\"\" />\r\n                        DexGuru\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"https://www.coingecko.com/en/coins/vlad-finance\" target=\"_blank\" rel=\"noreferrer\">\r\n                        <img src=\"../images/fcoingecko.svg\" className=\"img-fluid\" alt=\"\" />\r\n                        CoinGecko\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"https://coinmarketcap.com/currencies/vlad-finance/\" target=\"_blank\" rel=\"noreferrer\">\r\n                        <img src=\"../images/fcoinmarketcap.svg\" className=\"img-fluid\" alt=\"\" />\r\n                        CoinMarketCap\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://goswappcharts.web.app/?isbsc=true&tokenId=0x279d41f3f78fe5c1f0ba41ae963d6e545113c973\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/fgoswapp.svg\" className=\"img-fluid\" alt=\"\" />\r\n                        GoSwapp\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"https://nomics.com/assets/vlad-vlad-finance\" target=\"_blank\" rel=\"noreferrer\">\r\n                        <img src=\"../images/fnomics.svg\" className=\"img-fluid\" alt=\"\" />\r\n                        Nomics\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"https://www.livecoinwatch.com/price/VladFinance-VLAD\" target=\"_blank\" rel=\"noreferrer\">\r\n                        <img src=\"../images/fLiveCoinWatch.svg\" className=\"img-fluid\" alt=\"\" />\r\n                        LiveCoinWatch\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                <div className=\"col-sm-12 col-md-3\">\r\n                  <h6 style={{ color: 'white' }}>$LIFE</h6>\r\n                  <ul>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://bscscan.com/token/0x50f4220C82c9325dC99f729C3328FB5c338BEaae\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/fbscscanlogo.svg\" className=\"img-fluid\" alt=\"\" />\r\n                        BSCScan\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x50f4220C82c9325dC99f729C3328FB5c338BEaae\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/fpancakeswap.svg\" className=\"img-fluid\" alt=\"\" />\r\n                        Buy $LIFE\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://dex.guru/token/0x50f4220c82c9325dc99f729c3328fb5c338beaae-bsc\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/dexguru.png\" className=\"img-fluid\" alt=\"\" />\r\n                        DexGuru\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://goswappcharts.web.app/?isbsc=true&tokenId=0x50f4220C82c9325dC99f729C3328FB5c338BEaae\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/fgoswapp.svg\" className=\"img-fluid\" alt=\"goswapp\" />\r\n                        GoSwapp\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"fdeactive\">\r\n                      <img src=\"../images/fcoinmarketcap.svg\" className=\"img-fluid\" alt=\"\" />\r\n                      CoinMarketCap\r\n                    </li>\r\n                    <li className=\"fdeactive\">\r\n                      <img src=\"../images/fcoingecko.svg\" className=\"img-fluid\" alt=\"\" />\r\n                      CoinGecko\r\n                    </li>\r\n                    <li className=\"fdeactive\">\r\n                      <img src=\"../images/fnomics.svg\" className=\"img-fluid\" alt=\"\" />\r\n                      Nomics\r\n                    </li>\r\n                    <li className=\"fdeactive\">\r\n                      <img src=\"../images/fLiveCoinWatch.svg\" className=\"img-fluid\" alt=\"\" />\r\n                      LiveCoinWatch\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                <div className=\"col-sm-12 col-md-3\">\r\n                  <h6 style={{ color: 'white' }}>$aLIFE</h6>\r\n                  <ul>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://bscscan.com/token/0x42bA7BbDDEcb471c1e1Fe08636918952b6C19019\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/fbscscanlogo.svg\" className=\"img-fluid\" alt=\"\" />\r\n                        BSCScan\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x42bA7BbDDEcb471c1e1Fe08636918952b6C19019\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/fpancakeswap.svg\" className=\"img-fluid\" alt=\"\" />\r\n                        Buy $ALIFE\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://dex.guru/token/0x42ba7bbddecb471c1e1fe08636918952b6c19019-bsc\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/dexguru.png\" className=\"img-fluid\" alt=\"\" />\r\n                        DexGuru\r\n                      </a>\r\n                    </li>\r\n                    <li>\r\n                      <a\r\n                        href=\"https://goswappcharts.web.app/?isbsc=true&tokenId=0x42ba7bbddecb471c1e1fe08636918952b6c19019\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        <img src=\"../images/fgoswapp.svg\" className=\"img-fluid\" alt=\"GoSwapp\" />\r\n                        GoSwapp\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"fdeactive\">\r\n                      <img src=\"../images/fcoinmarketcap.svg\" className=\"img-fluid\" alt=\"\" />\r\n                      CoinMarketCap\r\n                    </li>\r\n                    <li className=\"fdeactive\">\r\n                      <img src=\"../images/fcoingecko.svg\" className=\"img-fluid\" alt=\"\" />\r\n                      CoinGecko\r\n                    </li>\r\n                    <li className=\"fdeactive\">\r\n                      <img src=\"../images/fnomics.svg\" className=\"img-fluid\" alt=\"\" />\r\n                      Nomics\r\n                    </li>\r\n                    <li className=\"fdeactive\">\r\n                      <img src=\"../images/fLiveCoinWatch.svg\" className=\"img-fluid\" alt=\"\" />\r\n                      LiveCoinWatch\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12 fo-copyright\">&copy; Vlad Finance.All Rights Reserved</div>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Menu","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\n\r\n// Route-based code splitting\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\nconst Marketplace = lazy(() => import('./views/Marketplace'))\r\nconst NftMarketplace = lazy(() => import('./views/NftMarketplace'))\r\nconst VLADCollection = lazy(() => import('./views/VLADCollection'))\r\nconst VLADCollectionDetail = lazy(() => import('./views/VLADCollectionDetail'))\r\nconst MyNFT = lazy(() => import('./views/MyNFT'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n          <Route path=\"/\" exact component={Marketplace} />\r\n          <Route path=\"/vlad-collection\" exact component={VLADCollection} />\r\n          <Route path=\"/vlad-detail/:id\" exact component={VLADCollectionDetail} />\r\n          <Route path=\"/my-nft\">\r\n            {!account ? <Redirect to=\"/\" /> : <MyNFT />}\r\n          </Route>\r\n          <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\nimport './style/css/main.css'\r\nimport './style/css/innerpage.css'\r\nimport './style/css/nftfactstyle.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract(abi as unknown as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n"],"sourceRoot":""}